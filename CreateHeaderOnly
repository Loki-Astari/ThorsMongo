#!/bin/bash

function get_awkScriptToConvertSourceToHeader {
    includeToIgnore=$1
    namespace=$2
    awkScriptToConvertSourceToHeader=$(
cat << AWK_SCRIPT_CONVERT_SRC
BEGIN                           {PRINT=1;DEPTH=0;}
/^#include "${includeToIgnore}"/{next;}
/^using namespace ${namespace};/{printf("namespace ${namespace}\n{\n");next;}
/^#ifdef COVERAGE_TEST/         {if (PRINT==1){SAVEDEPTH=DEPTH;PRINT=0;}}
/^#if/                          {DEPTH+=1;}
/^#endif/                       {DEPTH-=1;if (PRINT == 0 && SAVEDEPTH==DEPTH){PRINT=1;}}
                                {if (PRINT) {print;}}
END                             {print "}\n"}
AWK_SCRIPT_CONVERT_SRC
)
    echo "${awkScriptToConvertSourceToHeader}"
}

function get_awkScriptToConvertMakeFileToHeader {
    packageTarget=$1
    awkScriptToConvertMakeFileToHeader=$(
cat << AWK_SCRIPT_CONVERT_MAKE
/TARGET/                        {print "TARGET = ${packageTarget}.head";next;}
                                {print;}
AWK_SCRIPT_CONVERT_MAKE
)
    echo "${awkScriptToConvertMakeFileToHeader}"
}

awkScriptToConvertConfigFileToHeader=$(
cat << AWK_SCRIPT_CONVERT_CONFIG
/^#define HEADER_ONLY_INCLUDE/  {print "#define HEADER_ONLY_INCLUDE inline";next;}
/^#define HEADER_ONLY/          {print "#define HEADER_ONLY 1";next;}
                                {print;}
AWK_SCRIPT_CONVERT_CONFIG
)

function getHeaderOnlyCode {
    dst=$1
    branch=$2
    rm -rf ${dst}
    git clone --single-branch --branch ${branch} git@github.com:Loki-Astari/ThorsSerializer.git ${dst}
}

function convertPackageToHeaderOnly {

    dst=$1
    package=$2
    directory=${package#*/}
    packageTarget=$(cat ${package}/Makefile | awk '/TARGET/ {sub(/\..*/, "", $3);print $3;}')
    packageNamespace=$(cat ${package}/Makefile | awk '/NAMESPACE/ {print $3;}')
    packageDst=${dst}/${packageTarget}

    echo "Converting Module: ${package} => ${packageTarget}"

    rm -rf ${dst}/${packageTarget}
    mkdir ${dst}/${packageTarget}

    echo "        Copying standard header files"
    cp ${package}/*.h   ${packageDst}
    cp ${package}/*.tpp ${packageDst}

    echo "        Converting Makefile"
    awk "$(get_awkScriptToConvertMakeFileToHeader ${packageTarget})" ${package}/Makefile > ${packageDst}/Makefile

    echo "        Converting Config"
    awk "${awkScriptToConvertConfigFileToHeader}" ${package}/${directory}Config.h > ${packageDst}/${directory}Config.h

    if [[ -e ${package}/test ]]; then
        echo "        Copying test files and data"
        cp -R ${package}/test ${dst}/${packageTarget}
    fi

    for loop in $(ls ${package}/*.cpp 2> /dev/null); do
        file=${loop##*/}
        base=${file%%.cpp}
        echo "        Converting ${loop}  Into: ${packageDst}/${base}.source"
        awk "$(get_awkScriptToConvertSourceToHeader ${base}.h ${packageNamespace})" ${loop} >  ${packageDst}/${base}.source
    done
    echo
}

function convertToHeaderOnly {
    dst=$1
    getHeaderOnlyCode ${dst} header-only
    for package in src/Serialize src/ThorsStorage src/GitUtility src/ThorsIOUtil src/ThorsLogging; do

        convertPackageToHeaderOnly ${dst} "${package}"

    done
}

function testHeaderOnlyVersions {
    dst=$1
    wd=$(pwd)
    for package in src/ThorsLogging src/GitUtility src/ThorsIOUtil src/Serialize src/ThorsStorage; do
        packageTarget=$(cat ${package}/Makefile | awk '/TARGET/ {sub(/\..*/, "", $3);print $3;}')
        packageDst=${dst}/${packageTarget}

        cd ${packageDst}
        HEADER_ONLY=1 THORSANVIL_ROOT="${wd}" CXXFLAGS="-I${dst}" make test
        cd ${wd}
    done
}

convertToHeaderOnly /tmp/TS
testHeaderOnlyVersions /tmp/TS

