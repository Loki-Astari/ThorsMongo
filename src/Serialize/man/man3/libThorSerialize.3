.TH libThorSerialize 3
.SH NAME
libThorSerialize \- Serialization library for Json/Yaml
.SH SYNOPSIS
.B -lThorSerialize

.B -lThorSerialize

.B #include "ThorSerialize/JsonThor.h"

.B #include "ThorSerialize/YamlThor.h"

 namespace ThorsAnvil::Serialize {
        enum class OutputType {Default, Stream, Config};
        enum class ParseType  {Weak, Strict};

        OutputStremable jsonExport(SerializableObj obj, OutputType characteristics = Default);
        InputStreamable jsonImport(SerializableObj obj, ParseType  characteristics = Weak);

        OutputStremable yamlExport(SerializableObj obj, OutputType characteristics = Default);
        InputStreamable yamlImport(SerializableObj obj, ParseType  characteristics = Weak);
 }

.B #include "ThorSerialize/Trats.h"

 // Utility Macros
 ThorsAnvil_MakeTrait(DataType, ...);
 ThorsAnvil_ExpandTrait(ParentType, DataType, ...);
 // See ThorsAnvil_MakeTrait
 ThorsAnvil_Template_MakeTrait(TemplateParameterCount, DataType, ...);
 // See ThorsAnvil_ExpandTrait
 ThorsAnvil_Template_ExpandTrait(TemplateParameterCount, ParentType, DataType, ...);
 ThorsAnvil_MakeEnum(<EnumType>, <EnumValues>...);
 ThorsAnvil_MakeTraitCustom(DataType);

.B #include "ThorSerialize/Util.h"

 // This header contains the serialization definitions of all the standard containers.
.SH DESCRIPTION
The macros `ThorsAnvil_*()` can be used to mark classes as serializable. The `*Export()` functions can be used to serialize the object to a stream while the `*Import()` functions can be used to read data from a stream directly into an object.

.SH SEE ALSO
libThorSerialize jsonExport jsonImport yamlExport yamlImport ThorsAnvil_MakeTrait ThorsAnvil_ExpandTrait ThorsAnvil_Template_MakeTrait ThorsAnvil_Template_ExpandTrait ThorsAnvil_MakeEnum ThorsAnvil_MakeTraitCustom

.SH MORE INFO
https://github.com/Loki-Astari/ThorsSerializer

