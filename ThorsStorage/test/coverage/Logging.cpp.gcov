        -:    0:Source:Logging.cpp
        -:    0:Graph:coverage/Logging.gcno
        -:    0:Data:coverage/Logging.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "gtest/gtest.h"
        -:    2:#include "ThorsLogging/ThorsLogging.h"
        -:    3:#include <iostream>
        -:    4:#include <string>
        -:    5:
        -:    6:
        -:    7:
        -:    8:class LoggingEnvironment: public ::testing::Environment
        -:    9:{
        -:   10:    public:
    #####:   11:    ~LoggingEnvironment() override {}
        -:   12:
        -:   13:    // Override this to define how to set up the environment.
        1:   14:    void SetUp() override
        -:   15:    {
        -:   16:        using namespace std::string_literals;
        -:   17:
        1:   18:        char* logging = getenv("THOR_LOG_LEVEL");
        1:   19:        if (logging == nullptr)
        -:   20:        {
    #####:   21:            std::cerr << "NO - THOR_LOG_LEVEL\n";
    #####:   22:        }
        -:   23:        else
        -:   24:        {
        1:   25:            std::cerr << "Logging Level BEFORE: " << loguru::g_stderr_verbosity << "\n";
        1:   26:            std::cerr << "THOR_LOG_LEVEL = " << logging << "\n";
        1:   27:            int level = std::strtol(logging, nullptr, 10);
        1:   28:            if (level > 0 && level <10)
        -:   29:            {
    #####:   30:                loguru::g_stderr_verbosity = level;
    #####:   31:            }
        1:   32:            else if ("FATAL"s == logging)
        -:   33:            {
    #####:   34:                loguru::g_stderr_verbosity = loguru::Verbosity_FATAL;
    #####:   35:            }
        1:   36:            else if ("ERROR"s == logging)
        -:   37:            {
    #####:   38:                loguru::g_stderr_verbosity = loguru::Verbosity_ERROR;
    #####:   39:            }
        1:   40:            else if ("WARNING"s == logging)
        -:   41:            {
    #####:   42:                loguru::g_stderr_verbosity = loguru::Verbosity_WARNING;
    #####:   43:            }
        1:   44:            else if ("INFO"s == logging)
        -:   45:            {
    #####:   46:                loguru::g_stderr_verbosity = loguru::Verbosity_INFO;
    #####:   47:            }
        1:   48:            else if ("DEBUG"s == logging)
        -:   49:            {
    #####:   50:                loguru::g_stderr_verbosity = 5;
    #####:   51:            }
        1:   52:            else if ("ALL"s == logging)
        -:   53:            {
    #####:   54:                loguru::g_stderr_verbosity = 9;
    #####:   55:            }
        1:   56:            std::cerr << "Logging Level AFTER: " << loguru::g_stderr_verbosity << "\n";
        -:   57:        }
        1:   58:    }
        -:   59:
        -:   60:    // Override this to define how to tear down the environment.
        1:   61:    void TearDown() override {}
        -:   62:};
        -:   63:
        1:   64:bool initLogging()
        -:   65:{
        1:   66:    std::cerr << "Logging Init\n";
        1:   67:    ::testing::Environment* const foo_env = ::testing::AddGlobalTestEnvironment(new LoggingEnvironment);
        -:   68:    ((void)foo_env);
        1:   69:    return true;
        -:   70:}
        -:   71:
        1:   72:bool logingInit = initLogging();
        -:   73:
