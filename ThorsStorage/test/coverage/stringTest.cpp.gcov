        -:    0:Source:stringTest.cpp
        -:    0:Graph:coverage/stringTest.gcno
        -:    0:Data:coverage/stringTest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "gtest/gtest.h"
        -:    2:
        -:    3:#include "file.h"
        -:    4:#include "test/Person.h"
        -:    5:#include "test/TestFileClass.h"
        -:    6:
        -:    7:namespace TC=ThorsAnvil::FileSystem::ColumnFormat;
        -:    8:
        -:    9:using StringTest = SimpleTestDir;
        1:   10:
        4:   11:TEST_F(StringTest, WriteMultoLineString)
        1:   12:{
        -:   13:    {
        2:   14:        TC::OFile<TwoPeople>    file(simpleTestDir);
        2:   15:        ASSERT_TRUE(file);
        2:   16:        file << TwoPeople{Person{"Mult-Line\nString\n1234" ,20}, Person{"Loki", 22}};
        2:   17:        ASSERT_TRUE(file);
        2:   18:    }
        2:   19:
        3:   20:    std::string     line;
        1:   21:
        2:   22:    std::ifstream   p1nameFile(simpleTestDir + simpleP1Name);
        1:   23:    std::getline(p1nameFile, line);
        2:   24:    ASSERT_EQ(line, std::string("Mult-Line\000String\0001234", 21));
        2:   25:    ASSERT_TRUE(p1nameFile);
        2:   26:}
        -:   27:
        4:   28:TEST_F(StringTest, ReadMultoLineString)
        -:   29:{
        -:   30:    {
        1:   31:        TC::OFile<TwoPeople>    file(simpleTestDir);
        1:   32:        ASSERT_TRUE(file);
        1:   33:        file << TwoPeople{Person{"Mult-Line\nString\n1234" ,20}, Person{"Loki", 22}};
        1:   34:        ASSERT_TRUE(file);
        1:   35:    }
        -:   36:
        1:   37:    TC::IFile<TwoPeople>    file(simpleTestDir);
        1:   38:    TwoPeople               twoPerson;
        -:   39:
        1:   40:    file >> twoPerson;
        1:   41:    ASSERT_TRUE(file);
        -:   42:
        1:   43:    ASSERT_EQ(twoPerson.personOne.name, "Mult-Line\nString\n1234");
        1:   44:}
        -:   45:
