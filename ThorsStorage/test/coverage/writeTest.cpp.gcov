        -:    0:Source:writeTest.cpp
        -:    0:Graph:coverage/writeTest.gcno
        -:    0:Data:coverage/writeTest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "gtest/gtest.h"
        -:    2:
        -:    3:#include "file.h"
        -:    4:#include "test/Person.h"
        -:    5:#include "test/TestFileClass.h"
        -:    6:
        -:    7:namespace TC=ThorsAnvil::FileSystem::ColumnFormat;
        -:    8:
        -:    9:using WriteTest = SimpleTestDir;
        1:   10:
        4:   11:TEST_F(WriteTest, writeTwoPeople)
        1:   12:{
        -:   13:    {
        2:   14:        TC::OFile<TwoPeople>    file(simpleTestDir);
        2:   15:        ASSERT_TRUE(file);
        2:   16:        file << TwoPeople{Person{"Martin" ,20}, Person{"Loki", 22}};
        2:   17:        ASSERT_TRUE(file);
        2:   18:    }
        2:   19:
        3:   20:    std::string     line;
        1:   21:    int             number;
        1:   22:
        1:   23:    std::ifstream   p1nameFile(simpleTestDir + simpleP1Name);
        2:   24:    std::getline(p1nameFile, line);
        2:   25:    ASSERT_EQ(line, "Martin");
        2:   26:    ASSERT_TRUE(p1nameFile);
        -:   27:
        1:   28:    std::ifstream   p1ageFile(simpleTestDir + simpleP1Age);
        1:   29:    p1ageFile.read(reinterpret_cast<char*>(&number), sizeof number);
        1:   30:    ASSERT_EQ(number, 20);
        1:   31:    ASSERT_TRUE(p1ageFile);
        -:   32:
        1:   33:    std::ifstream   p2nameFile(simpleTestDir + simpleP2Name);
        1:   34:    std::getline(p2nameFile, line);
        1:   35:    ASSERT_EQ(line, "Loki");
        1:   36:    ASSERT_TRUE(p2nameFile);
        -:   37:
        1:   38:    std::ifstream   p2ageFile(simpleTestDir + simpleP2Age);
        1:   39:    p2ageFile.read(reinterpret_cast<char*>(&number), sizeof number);
        1:   40:    ASSERT_EQ(number, 22);
        1:   41:    ASSERT_TRUE(p2ageFile);
        1:   42:}
        -:   43:
        4:   44:TEST_F(WriteTest, readNormal)
        -:   45:{
        -:   46:    {
        1:   47:        TC::OFile<TwoPeople>    file(simpleTestDir);
        1:   48:        file << TwoPeople{Person{"Martin", 20}, Person{"Loki",   22}};
        1:   49:        ASSERT_TRUE(file);
        1:   50:    }
        -:   51:
        1:   52:    TwoPeople               twoP;
        1:   53:    TC::IFile<TwoPeople>    file(simpleTestDir);
        1:   54:    ASSERT_TRUE(file >> twoP);
        1:   55:    ASSERT_EQ(twoP.personOne.name, "Martin");
        1:   56:    ASSERT_EQ(twoP.personTwo.name, "Loki");
        1:   57:    ASSERT_EQ(twoP.personOne.age,  20);
        1:   58:    ASSERT_EQ(twoP.personTwo.age,  22);
        -:   59:
        1:   60:    ASSERT_FALSE(file >> twoP);
        1:   61:}
        -:   62:
        4:   63:TEST_F(WriteTest, badReadDoesNotChangeFile)
        -:   64:{
        -:   65:    {
        1:   66:        TC::OFile<TwoPeople>    file(simpleTestDir);
        1:   67:        TwoPeople   p1{Person{"Martin", 20}, Person{"Loki",   22}};
        1:   68:        ASSERT_TRUE(
        -:   69:            file << p1
        -:   70:        );
        -:   71:
        1:   72:        file.setstate(std::ios::failbit);
        1:   73:        TwoPeople   p2{Person{"BAD",    45}, Person{"STATE",  99}};
        1:   74:        ASSERT_FALSE(
        -:   75:            file << p2
        -:   76:        );
        1:   77:        file.clear();
        -:   78:
        -:   79:
        1:   80:        TwoPeople   p3{Person{"Again",  28}, Person{"Astari", 29}};
        1:   81:        ASSERT_TRUE(
        -:   82:            file << p3
        -:   83:        );
        1:   84:    }
        -:   85:
        1:   86:    TwoPeople               twoP;
        1:   87:    TC::IFile<TwoPeople>    file(simpleTestDir);
        1:   88:    ASSERT_TRUE(file >> twoP);
        1:   89:    ASSERT_EQ(twoP.personOne.name, "Martin");
        1:   90:    ASSERT_EQ(twoP.personTwo.name, "Loki");
        1:   91:    ASSERT_EQ(twoP.personOne.age,  20);
        1:   92:    ASSERT_EQ(twoP.personTwo.age,  22);
        -:   93:
        1:   94:    ASSERT_TRUE(file >> twoP);
        1:   95:    ASSERT_EQ(twoP.personOne.name, "Again");
        1:   96:    ASSERT_EQ(twoP.personTwo.name, "Astari");
        1:   97:    ASSERT_EQ(twoP.personOne.age,  28);
        1:   98:    ASSERT_EQ(twoP.personTwo.age,  29);
        -:   99:
        1:  100:    ASSERT_FALSE(file >> twoP);
        1:  101:}
        -:  102:
        -:  103:
