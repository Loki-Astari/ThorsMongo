        -:    0:Source:/Users/martinyork/TEST/ThorsSerializer/third/ThorsStorage/build/include3rd/gtest/gtest-printers.h
        -:    0:Graph:coverage/stringTest.gcno
        -:    0:Data:coverage/stringTest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Copyright 2007, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29://
        -:   30:// Author: wan@google.com (Zhanyong Wan)
        -:   31:
        -:   32:// Google Test - The Google C++ Testing Framework
        -:   33://
        -:   34:// This file implements a universal value printer that can print a
        -:   35:// value of any type T:
        -:   36://
        -:   37://   void ::testing::internal::UniversalPrinter<T>::Print(value, ostream_ptr);
        -:   38://
        -:   39:// A user can teach this function how to print a class type T by
        -:   40:// defining either operator<<() or PrintTo() in the namespace that
        -:   41:// defines T.  More specifically, the FIRST defined function in the
        -:   42:// following list will be used (assuming T is defined in namespace
        -:   43:// foo):
        -:   44://
        -:   45://   1. foo::PrintTo(const T&, ostream*)
        -:   46://   2. operator<<(ostream&, const T&) defined in either foo or the
        -:   47://      global namespace.
        -:   48://
        -:   49:// If none of the above is defined, it will print the debug string of
        -:   50:// the value if it is a protocol buffer, or print the raw bytes in the
        -:   51:// value otherwise.
        -:   52://
        -:   53:// To aid debugging: when T is a reference type, the address of the
        -:   54:// value is also printed; when T is a (const) char pointer, both the
        -:   55:// pointer value and the NUL-terminated string it points to are
        -:   56:// printed.
        -:   57://
        -:   58:// We also provide some convenient wrappers:
        -:   59://
        -:   60://   // Prints a value to a string.  For a (const or not) char
        -:   61://   // pointer, the NUL-terminated string (but not the pointer) is
        -:   62://   // printed.
        -:   63://   std::string ::testing::PrintToString(const T& value);
        -:   64://
        -:   65://   // Prints a value tersely: for a reference type, the referenced
        -:   66://   // value (but not the address) is printed; for a (const or not) char
        -:   67://   // pointer, the NUL-terminated string (but not the pointer) is
        -:   68://   // printed.
        -:   69://   void ::testing::internal::UniversalTersePrint(const T& value, ostream*);
        -:   70://
        -:   71://   // Prints value using the type inferred by the compiler.  The difference
        -:   72://   // from UniversalTersePrint() is that this function prints both the
        -:   73://   // pointer and the NUL-terminated string for a (const or not) char pointer.
        -:   74://   void ::testing::internal::UniversalPrint(const T& value, ostream*);
        -:   75://
        -:   76://   // Prints the fields of a tuple tersely to a string vector, one
        -:   77://   // element for each field. Tuple support must be enabled in
        -:   78://   // gtest-port.h.
        -:   79://   std::vector<string> UniversalTersePrintTupleFieldsToStrings(
        -:   80://       const Tuple& value);
        -:   81://
        -:   82:// Known limitation:
        -:   83://
        -:   84:// The print primitives print the elements of an STL-style container
        -:   85:// using the compiler-inferred type of *iter where iter is a
        -:   86:// const_iterator of the container.  When const_iterator is an input
        -:   87:// iterator but not a forward iterator, this inferred type may not
        -:   88:// match value_type, and the print output may be incorrect.  In
        -:   89:// practice, this is rarely a problem as for most containers
        -:   90:// const_iterator is a forward iterator.  We'll fix this if there's an
        -:   91:// actual need for it.  Note that this fix cannot rely on value_type
        -:   92:// being defined as many user-defined container types don't have
        -:   93:// value_type.
        -:   94:
        -:   95:#ifndef GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_
        -:   96:#define GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_
        -:   97:
        -:   98:#include <ostream>  // NOLINT
        -:   99:#include <sstream>
        -:  100:#include <string>
        -:  101:#include <utility>
        -:  102:#include <vector>
        -:  103:#include "gtest/internal/gtest-port.h"
        -:  104:#include "gtest/internal/gtest-internal.h"
        -:  105:
        -:  106:#if GTEST_HAS_STD_TUPLE_
        -:  107:# include <tuple>
        -:  108:#endif
        -:  109:
        -:  110:namespace testing {
        -:  111:
        -:  112:// Definitions in the 'internal' and 'internal2' name spaces are
        -:  113:// subject to change without notice.  DO NOT USE THEM IN USER CODE!
        -:  114:namespace internal2 {
        -:  115:
        -:  116:// Prints the given number of bytes in the given object to the given
        -:  117:// ostream.
        -:  118:GTEST_API_ void PrintBytesInObjectTo(const unsigned char* obj_bytes,
        -:  119:                                     size_t count,
        -:  120:                                     ::std::ostream* os);
        -:  121:
        -:  122:// For selecting which printer to use when a given type has neither <<
        -:  123:// nor PrintTo().
        -:  124:enum TypeKind {
        -:  125:  kProtobuf,              // a protobuf type
        -:  126:  kConvertibleToInteger,  // a type implicitly convertible to BiggestInt
        -:  127:                          // (e.g. a named or unnamed enum type)
        -:  128:  kOtherType              // anything else
        -:  129:};
        -:  130:
        -:  131:// TypeWithoutFormatter<T, kTypeKind>::PrintValue(value, os) is called
        -:  132:// by the universal printer to print a value of type T when neither
        -:  133:// operator<< nor PrintTo() is defined for T, where kTypeKind is the
        -:  134:// "kind" of T as defined by enum TypeKind.
        -:  135:template <typename T, TypeKind kTypeKind>
        -:  136:class TypeWithoutFormatter {
        -:  137: public:
        -:  138:  // This default version is called when kTypeKind is kOtherType.
        -:  139:  static void PrintValue(const T& value, ::std::ostream* os) {
        -:  140:    PrintBytesInObjectTo(reinterpret_cast<const unsigned char*>(&value),
        -:  141:                         sizeof(value), os);
        -:  142:  }
        -:  143:};
        -:  144:
        -:  145:// We print a protobuf using its ShortDebugString() when the string
        -:  146:// doesn't exceed this many characters; otherwise we print it using
        -:  147:// DebugString() for better readability.
        -:  148:const size_t kProtobufOneLinerMaxLength = 50;
        -:  149:
        -:  150:template <typename T>
        -:  151:class TypeWithoutFormatter<T, kProtobuf> {
        -:  152: public:
        -:  153:  static void PrintValue(const T& value, ::std::ostream* os) {
        -:  154:    std::string pretty_str = value.ShortDebugString();
        -:  155:    if (pretty_str.length() > kProtobufOneLinerMaxLength) {
        -:  156:      pretty_str = "\n" + value.DebugString();
        -:  157:    }
        -:  158:    *os << ("<" + pretty_str + ">");
        -:  159:  }
        -:  160:};
        -:  161:
        -:  162:template <typename T>
        -:  163:class TypeWithoutFormatter<T, kConvertibleToInteger> {
        -:  164: public:
        -:  165:  // Since T has no << operator or PrintTo() but can be implicitly
        -:  166:  // converted to BiggestInt, we print it as a BiggestInt.
        -:  167:  //
        -:  168:  // Most likely T is an enum type (either named or unnamed), in which
        -:  169:  // case printing it as an integer is the desired behavior.  In case
        -:  170:  // T is not an enum, printing it as an integer is the best we can do
        -:  171:  // given that it has no user-defined printer.
        -:  172:  static void PrintValue(const T& value, ::std::ostream* os) {
        -:  173:    const internal::BiggestInt kBigInt = value;
        -:  174:    *os << kBigInt;
        -:  175:  }
        -:  176:};
        -:  177:
        -:  178:// Prints the given value to the given ostream.  If the value is a
        -:  179:// protocol message, its debug string is printed; if it's an enum or
        -:  180:// of a type implicitly convertible to BiggestInt, it's printed as an
        -:  181:// integer; otherwise the bytes in the value are printed.  This is
        -:  182:// what UniversalPrinter<T>::Print() does when it knows nothing about
        -:  183:// type T and T has neither << operator nor PrintTo().
        -:  184://
        -:  185:// A user can override this behavior for a class type Foo by defining
        -:  186:// a << operator in the namespace where Foo is defined.
        -:  187://
        -:  188:// We put this operator in namespace 'internal2' instead of 'internal'
        -:  189:// to simplify the implementation, as much code in 'internal' needs to
        -:  190:// use << in STL, which would conflict with our own << were it defined
        -:  191:// in 'internal'.
        -:  192://
        -:  193:// Note that this operator<< takes a generic std::basic_ostream<Char,
        -:  194:// CharTraits> type instead of the more restricted std::ostream.  If
        -:  195:// we define it to take an std::ostream instead, we'll get an
        -:  196:// "ambiguous overloads" compiler error when trying to print a type
        -:  197:// Foo that supports streaming to std::basic_ostream<Char,
        -:  198:// CharTraits>, as the compiler cannot tell whether
        -:  199:// operator<<(std::ostream&, const T&) or
        -:  200:// operator<<(std::basic_stream<Char, CharTraits>, const Foo&) is more
        -:  201:// specific.
        -:  202:template <typename Char, typename CharTraits, typename T>
        -:  203:::std::basic_ostream<Char, CharTraits>& operator<<(
        -:  204:    ::std::basic_ostream<Char, CharTraits>& os, const T& x) {
        -:  205:  TypeWithoutFormatter<T,
        -:  206:      (internal::IsAProtocolMessage<T>::value ? kProtobuf :
        -:  207:       internal::ImplicitlyConvertible<const T&, internal::BiggestInt>::value ?
        -:  208:       kConvertibleToInteger : kOtherType)>::PrintValue(x, &os);
        -:  209:  return os;
        -:  210:}
        -:  211:
        -:  212:}  // namespace internal2
        -:  213:}  // namespace testing
        -:  214:
        -:  215:// This namespace MUST NOT BE NESTED IN ::testing, or the name look-up
        -:  216:// magic needed for implementing UniversalPrinter won't work.
        -:  217:namespace testing_internal {
        -:  218:
        -:  219:// Used to print a value that is not an STL-style container when the
        -:  220:// user doesn't define PrintTo() for it.
        -:  221:template <typename T>
        -:  222:void DefaultPrintNonContainerTo(const T& value, ::std::ostream* os) {
        -:  223:  // With the following statement, during unqualified name lookup,
        -:  224:  // testing::internal2::operator<< appears as if it was declared in
        -:  225:  // the nearest enclosing namespace that contains both
        -:  226:  // ::testing_internal and ::testing::internal2, i.e. the global
        -:  227:  // namespace.  For more details, refer to the C++ Standard section
        -:  228:  // 7.3.4-1 [namespace.udir].  This allows us to fall back onto
        -:  229:  // testing::internal2::operator<< in case T doesn't come with a <<
        -:  230:  // operator.
        -:  231:  //
        -:  232:  // We cannot write 'using ::testing::internal2::operator<<;', which
        -:  233:  // gcc 3.3 fails to compile due to a compiler bug.
        -:  234:  using namespace ::testing::internal2;  // NOLINT
        -:  235:
        -:  236:  // Assuming T is defined in namespace foo, in the next statement,
        -:  237:  // the compiler will consider all of:
        -:  238:  //
        -:  239:  //   1. foo::operator<< (thanks to Koenig look-up),
        -:  240:  //   2. ::operator<< (as the current namespace is enclosed in ::),
        -:  241:  //   3. testing::internal2::operator<< (thanks to the using statement above).
        -:  242:  //
        -:  243:  // The operator<< whose type matches T best will be picked.
        -:  244:  //
        -:  245:  // We deliberately allow #2 to be a candidate, as sometimes it's
        -:  246:  // impossible to define #1 (e.g. when foo is ::std, defining
        -:  247:  // anything in it is undefined behavior unless you are a compiler
        -:  248:  // vendor.).
        -:  249:  *os << value;
        -:  250:}
        -:  251:
        -:  252:}  // namespace testing_internal
        -:  253:
        -:  254:namespace testing {
        -:  255:namespace internal {
        -:  256:
        -:  257:// FormatForComparison<ToPrint, OtherOperand>::Format(value) formats a
        -:  258:// value of type ToPrint that is an operand of a comparison assertion
        -:  259:// (e.g. ASSERT_EQ).  OtherOperand is the type of the other operand in
        -:  260:// the comparison, and is used to help determine the best way to
        -:  261:// format the value.  In particular, when the value is a C string
        -:  262:// (char pointer) and the other operand is an STL string object, we
        -:  263:// want to format the C string as a string, since we know it is
        -:  264:// compared by value with the string object.  If the value is a char
        -:  265:// pointer but the other operand is not an STL string object, we don't
        -:  266:// know whether the pointer is supposed to point to a NUL-terminated
        -:  267:// string, and thus want to print it as a pointer to be safe.
        -:  268://
        -:  269:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
        -:  270:
        -:  271:// The default case.
        -:  272:template <typename ToPrint, typename OtherOperand>
        -:  273:class FormatForComparison {
        -:  274: public:
    #####:  275:  static ::std::string Format(const ToPrint& value) {
    #####:  276:    return ::testing::PrintToString(value);
        -:  277:  }
        -:  278:};
        -:  279:
        -:  280:// Array.
        -:  281:template <typename ToPrint, size_t N, typename OtherOperand>
        -:  282:class FormatForComparison<ToPrint[N], OtherOperand> {
        -:  283: public:
    #####:  284:  static ::std::string Format(const ToPrint* value) {
    #####:  285:    return FormatForComparison<const ToPrint*, OtherOperand>::Format(value);
        -:  286:  }
        -:  287:};
        -:  288:
        -:  289:// By default, print C string as pointers to be safe, as we don't know
        -:  290:// whether they actually point to a NUL-terminated string.
        -:  291:
        -:  292:#define GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(CharType)                \
        -:  293:  template <typename OtherOperand>                                      \
        -:  294:  class FormatForComparison<CharType*, OtherOperand> {                  \
        -:  295:   public:                                                              \
        -:  296:    static ::std::string Format(CharType* value) {                      \
        -:  297:      return ::testing::PrintToString(static_cast<const void*>(value)); \
        -:  298:    }                                                                   \
        -:  299:  }
        -:  300:
        -:  301:GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(char);
        -:  302:GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(const char);
        -:  303:GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(wchar_t);
        -:  304:GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(const wchar_t);
        -:  305:
        -:  306:#undef GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_
        -:  307:
        -:  308:// If a C string is compared with an STL string object, we know it's meant
        -:  309:// to point to a NUL-terminated string, and thus can print it as a string.
        -:  310:
        -:  311:#define GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(CharType, OtherStringType) \
        -:  312:  template <>                                                           \
        -:  313:  class FormatForComparison<CharType*, OtherStringType> {               \
        -:  314:   public:                                                              \
        -:  315:    static ::std::string Format(CharType* value) {                      \
        -:  316:      return ::testing::PrintToString(value);                           \
        -:  317:    }                                                                   \
        -:  318:  }
        -:  319:
        -:  320:GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(char, ::std::string);
    #####:  321:GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(const char, ::std::string);
        -:  322:
        -:  323:#if GTEST_HAS_GLOBAL_STRING
        -:  324:GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(char, ::string);
        -:  325:GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(const char, ::string);
        -:  326:#endif
        -:  327:
        -:  328:#if GTEST_HAS_GLOBAL_WSTRING
        -:  329:GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(wchar_t, ::wstring);
        -:  330:GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(const wchar_t, ::wstring);
        -:  331:#endif
        -:  332:
        -:  333:#if GTEST_HAS_STD_WSTRING
        -:  334:GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(wchar_t, ::std::wstring);
        -:  335:GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(const wchar_t, ::std::wstring);
        -:  336:#endif
        -:  337:
        -:  338:#undef GTEST_IMPL_FORMAT_C_STRING_AS_STRING_
        -:  339:
        -:  340:// Formats a comparison assertion (e.g. ASSERT_EQ, EXPECT_LT, and etc)
        -:  341:// operand to be used in a failure message.  The type (but not value)
        -:  342:// of the other operand may affect the format.  This allows us to
        -:  343:// print a char* as a raw pointer when it is compared against another
        -:  344:// char* or void*, and print it as a C string when it is compared
        -:  345:// against an std::string object, for example.
        -:  346://
        -:  347:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
        -:  348:template <typename T1, typename T2>
    #####:  349:std::string FormatForComparisonFailureMessage(
        -:  350:    const T1& value, const T2& /* other_operand */) {
    #####:  351:  return FormatForComparison<T1, T2>::Format(value);
        -:  352:}
        -:  353:
        -:  354:// UniversalPrinter<T>::Print(value, ostream_ptr) prints the given
        -:  355:// value to the given ostream.  The caller must ensure that
        -:  356:// 'ostream_ptr' is not NULL, or the behavior is undefined.
        -:  357://
        -:  358:// We define UniversalPrinter as a class template (as opposed to a
        -:  359:// function template), as we need to partially specialize it for
        -:  360:// reference types, which cannot be done with function templates.
        -:  361:template <typename T>
        -:  362:class UniversalPrinter;
        -:  363:
        -:  364:template <typename T>
        -:  365:void UniversalPrint(const T& value, ::std::ostream* os);
        -:  366:
        -:  367:enum DefaultPrinterType {
        -:  368:  kPrintContainer,
        -:  369:  kPrintPointer,
        -:  370:  kPrintFunctionPointer,
        -:  371:  kPrintOther,
        -:  372:};
        -:  373:template <DefaultPrinterType type> struct WrapPrinterType {};
        -:  374:
        -:  375:// Used to print an STL-style container when the user doesn't define
        -:  376:// a PrintTo() for it.
        -:  377:template <typename C>
        -:  378:void DefaultPrintTo(WrapPrinterType<kPrintContainer> /* dummy */,
        -:  379:                    const C& container, ::std::ostream* os) {
        -:  380:  const size_t kMaxCount = 32;  // The maximum number of elements to print.
        -:  381:  *os << '{';
        -:  382:  size_t count = 0;
        -:  383:  for (typename C::const_iterator it = container.begin();
        -:  384:       it != container.end(); ++it, ++count) {
        -:  385:    if (count > 0) {
        -:  386:      *os << ',';
        -:  387:      if (count == kMaxCount) {  // Enough has been printed.
        -:  388:        *os << " ...";
        -:  389:        break;
        -:  390:      }
        -:  391:    }
        -:  392:    *os << ' ';
        -:  393:    // We cannot call PrintTo(*it, os) here as PrintTo() doesn't
        -:  394:    // handle *it being a native array.
        -:  395:    internal::UniversalPrint(*it, os);
        -:  396:  }
        -:  397:
        -:  398:  if (count > 0) {
        -:  399:    *os << ' ';
        -:  400:  }
        -:  401:  *os << '}';
        -:  402:}
        -:  403:
        -:  404:// Used to print a pointer that is neither a char pointer nor a member
        -:  405:// pointer, when the user doesn't define PrintTo() for it.  (A member
        -:  406:// variable pointer or member function pointer doesn't really point to
        -:  407:// a location in the address space.  Their representation is
        -:  408:// implementation-defined.  Therefore they will be printed as raw
        -:  409:// bytes.)
        -:  410:template <typename T>
        -:  411:void DefaultPrintTo(WrapPrinterType<kPrintPointer> /* dummy */,
        -:  412:                    T* p, ::std::ostream* os) {
        -:  413:  if (p == NULL) {
        -:  414:    *os << "NULL";
        -:  415:  } else {
        -:  416:    // T is not a function type.  We just call << to print p,
        -:  417:    // relying on ADL to pick up user-defined << for their pointer
        -:  418:    // types, if any.
        -:  419:    *os << p;
        -:  420:  }
        -:  421:}
        -:  422:template <typename T>
        -:  423:void DefaultPrintTo(WrapPrinterType<kPrintFunctionPointer> /* dummy */,
        -:  424:                    T* p, ::std::ostream* os) {
        -:  425:  if (p == NULL) {
        -:  426:    *os << "NULL";
        -:  427:  } else {
        -:  428:    // T is a function type, so '*os << p' doesn't do what we want
        -:  429:    // (it just prints p as bool).  We want to print p as a const
        -:  430:    // void*.  However, we cannot cast it to const void* directly,
        -:  431:    // even using reinterpret_cast, as earlier versions of gcc
        -:  432:    // (e.g. 3.4.5) cannot compile the cast when p is a function
        -:  433:    // pointer.  Casting to UInt64 first solves the problem.
        -:  434:    *os << reinterpret_cast<const void*>(
        -:  435:        reinterpret_cast<internal::UInt64>(p));
        -:  436:  }
        -:  437:}
        -:  438:
        -:  439:// Used to print a non-container, non-pointer value when the user
        -:  440:// doesn't define PrintTo() for it.
        -:  441:template <typename T>
        -:  442:void DefaultPrintTo(WrapPrinterType<kPrintOther> /* dummy */,
        -:  443:                    const T& value, ::std::ostream* os) {
        -:  444:  ::testing_internal::DefaultPrintNonContainerTo(value, os);
        -:  445:}
        -:  446:
        -:  447:// Prints the given value using the << operator if it has one;
        -:  448:// otherwise prints the bytes in it.  This is what
        -:  449:// UniversalPrinter<T>::Print() does when PrintTo() is not specialized
        -:  450:// or overloaded for type T.
        -:  451://
        -:  452:// A user can override this behavior for a class type Foo by defining
        -:  453:// an overload of PrintTo() in the namespace where Foo is defined.  We
        -:  454:// give the user this option as sometimes defining a << operator for
        -:  455:// Foo is not desirable (e.g. the coding style may prevent doing it,
        -:  456:// or there is already a << operator but it doesn't do what the user
        -:  457:// wants).
        -:  458:template <typename T>
        -:  459:void PrintTo(const T& value, ::std::ostream* os) {
        -:  460:  // DefaultPrintTo() is overloaded.  The type of its first argument
        -:  461:  // determines which version will be picked.
        -:  462:  //
        -:  463:  // Note that we check for container types here, prior to we check
        -:  464:  // for protocol message types in our operator<<.  The rationale is:
        -:  465:  //
        -:  466:  // For protocol messages, we want to give people a chance to
        -:  467:  // override Google Mock's format by defining a PrintTo() or
        -:  468:  // operator<<.  For STL containers, other formats can be
        -:  469:  // incompatible with Google Mock's format for the container
        -:  470:  // elements; therefore we check for container types here to ensure
        -:  471:  // that our format is used.
        -:  472:  //
        -:  473:  // Note that MSVC and clang-cl do allow an implicit conversion from
        -:  474:  // pointer-to-function to pointer-to-object, but clang-cl warns on it.
        -:  475:  // So don't use ImplicitlyConvertible if it can be helped since it will
        -:  476:  // cause this warning, and use a separate overload of DefaultPrintTo for
        -:  477:  // function pointers so that the `*os << p` in the object pointer overload
        -:  478:  // doesn't cause that warning either.
        -:  479:  DefaultPrintTo(
        -:  480:      WrapPrinterType<sizeof(IsContainerTest<T>(0)) == sizeof(IsContainer)
        -:  481:          ? kPrintContainer : !is_pointer<T>::value
        -:  482:                ? kPrintOther
        -:  483:#if GTEST_LANG_CXX11
        -:  484:                : std::is_function<typename std::remove_pointer<T>::type>::value
        -:  485:#else
        -:  486:                : !internal::ImplicitlyConvertible<T, const void*>::value
        -:  487:#endif
        -:  488:                      ? kPrintFunctionPointer
        -:  489:                      : kPrintPointer>(),
        -:  490:      value, os);
        -:  491:}
        -:  492:
        -:  493:// The following list of PrintTo() overloads tells
        -:  494:// UniversalPrinter<T>::Print() how to print standard types (built-in
        -:  495:// types, strings, plain arrays, and pointers).
        -:  496:
        -:  497:// Overloads for various char types.
        -:  498:GTEST_API_ void PrintTo(unsigned char c, ::std::ostream* os);
        -:  499:GTEST_API_ void PrintTo(signed char c, ::std::ostream* os);
        -:  500:inline void PrintTo(char c, ::std::ostream* os) {
        -:  501:  // When printing a plain char, we always treat it as unsigned.  This
        -:  502:  // way, the output won't be affected by whether the compiler thinks
        -:  503:  // char is signed or not.
        -:  504:  PrintTo(static_cast<unsigned char>(c), os);
        -:  505:}
        -:  506:
        -:  507:// Overloads for other simple built-in types.
        -:  508:inline void PrintTo(bool x, ::std::ostream* os) {
        -:  509:  *os << (x ? "true" : "false");
        -:  510:}
        -:  511:
        -:  512:// Overload for wchar_t type.
        -:  513:// Prints a wchar_t as a symbol if it is printable or as its internal
        -:  514:// code otherwise and also as its decimal code (except for L'\0').
        -:  515:// The L'\0' char is printed as "L'\\0'". The decimal code is printed
        -:  516:// as signed integer when wchar_t is implemented by the compiler
        -:  517:// as a signed type and is printed as an unsigned integer when wchar_t
        -:  518:// is implemented as an unsigned type.
        -:  519:GTEST_API_ void PrintTo(wchar_t wc, ::std::ostream* os);
        -:  520:
        -:  521:// Overloads for C strings.
        -:  522:GTEST_API_ void PrintTo(const char* s, ::std::ostream* os);
        -:  523:inline void PrintTo(char* s, ::std::ostream* os) {
        -:  524:  PrintTo(ImplicitCast_<const char*>(s), os);
        -:  525:}
        -:  526:
        -:  527:// signed/unsigned char is often used for representing binary data, so
        -:  528:// we print pointers to it as void* to be safe.
        -:  529:inline void PrintTo(const signed char* s, ::std::ostream* os) {
        -:  530:  PrintTo(ImplicitCast_<const void*>(s), os);
        -:  531:}
        -:  532:inline void PrintTo(signed char* s, ::std::ostream* os) {
        -:  533:  PrintTo(ImplicitCast_<const void*>(s), os);
        -:  534:}
        -:  535:inline void PrintTo(const unsigned char* s, ::std::ostream* os) {
        -:  536:  PrintTo(ImplicitCast_<const void*>(s), os);
        -:  537:}
        -:  538:inline void PrintTo(unsigned char* s, ::std::ostream* os) {
        -:  539:  PrintTo(ImplicitCast_<const void*>(s), os);
        -:  540:}
        -:  541:
        -:  542:// MSVC can be configured to define wchar_t as a typedef of unsigned
        -:  543:// short.  It defines _NATIVE_WCHAR_T_DEFINED when wchar_t is a native
        -:  544:// type.  When wchar_t is a typedef, defining an overload for const
        -:  545:// wchar_t* would cause unsigned short* be printed as a wide string,
        -:  546:// possibly causing invalid memory accesses.
        -:  547:#if !defined(_MSC_VER) || defined(_NATIVE_WCHAR_T_DEFINED)
        -:  548:// Overloads for wide C strings
        -:  549:GTEST_API_ void PrintTo(const wchar_t* s, ::std::ostream* os);
        -:  550:inline void PrintTo(wchar_t* s, ::std::ostream* os) {
        -:  551:  PrintTo(ImplicitCast_<const wchar_t*>(s), os);
        -:  552:}
        -:  553:#endif
        -:  554:
        -:  555:// Overload for C arrays.  Multi-dimensional arrays are printed
        -:  556:// properly.
        -:  557:
        -:  558:// Prints the given number of elements in an array, without printing
        -:  559:// the curly braces.
        -:  560:template <typename T>
        -:  561:void PrintRawArrayTo(const T a[], size_t count, ::std::ostream* os) {
        -:  562:  UniversalPrint(a[0], os);
        -:  563:  for (size_t i = 1; i != count; i++) {
        -:  564:    *os << ", ";
        -:  565:    UniversalPrint(a[i], os);
        -:  566:  }
        -:  567:}
        -:  568:
        -:  569:// Overloads for ::string and ::std::string.
        -:  570:#if GTEST_HAS_GLOBAL_STRING
        -:  571:GTEST_API_ void PrintStringTo(const ::string&s, ::std::ostream* os);
        -:  572:inline void PrintTo(const ::string& s, ::std::ostream* os) {
        -:  573:  PrintStringTo(s, os);
        -:  574:}
        -:  575:#endif  // GTEST_HAS_GLOBAL_STRING
        -:  576:
        -:  577:GTEST_API_ void PrintStringTo(const ::std::string&s, ::std::ostream* os);
    #####:  578:inline void PrintTo(const ::std::string& s, ::std::ostream* os) {
    #####:  579:  PrintStringTo(s, os);
    #####:  580:}
        -:  581:
        -:  582:// Overloads for ::wstring and ::std::wstring.
        -:  583:#if GTEST_HAS_GLOBAL_WSTRING
        -:  584:GTEST_API_ void PrintWideStringTo(const ::wstring&s, ::std::ostream* os);
        -:  585:inline void PrintTo(const ::wstring& s, ::std::ostream* os) {
        -:  586:  PrintWideStringTo(s, os);
        -:  587:}
        -:  588:#endif  // GTEST_HAS_GLOBAL_WSTRING
        -:  589:
        -:  590:#if GTEST_HAS_STD_WSTRING
        -:  591:GTEST_API_ void PrintWideStringTo(const ::std::wstring&s, ::std::ostream* os);
        -:  592:inline void PrintTo(const ::std::wstring& s, ::std::ostream* os) {
        -:  593:  PrintWideStringTo(s, os);
        -:  594:}
        -:  595:#endif  // GTEST_HAS_STD_WSTRING
        -:  596:
        -:  597:#if GTEST_HAS_TR1_TUPLE || GTEST_HAS_STD_TUPLE_
        -:  598:// Helper function for printing a tuple.  T must be instantiated with
        -:  599:// a tuple type.
        -:  600:template <typename T>
        -:  601:void PrintTupleTo(const T& t, ::std::ostream* os);
        -:  602:#endif  // GTEST_HAS_TR1_TUPLE || GTEST_HAS_STD_TUPLE_
        -:  603:
        -:  604:#if GTEST_HAS_TR1_TUPLE
        -:  605:// Overload for ::std::tr1::tuple.  Needed for printing function arguments,
        -:  606:// which are packed as tuples.
        -:  607:
        -:  608:// Overloaded PrintTo() for tuples of various arities.  We support
        -:  609:// tuples of up-to 10 fields.  The following implementation works
        -:  610:// regardless of whether tr1::tuple is implemented using the
        -:  611:// non-standard variadic template feature or not.
        -:  612:
        -:  613:inline void PrintTo(const ::std::tr1::tuple<>& t, ::std::ostream* os) {
        -:  614:  PrintTupleTo(t, os);
        -:  615:}
        -:  616:
        -:  617:template <typename T1>
        -:  618:void PrintTo(const ::std::tr1::tuple<T1>& t, ::std::ostream* os) {
        -:  619:  PrintTupleTo(t, os);
        -:  620:}
        -:  621:
        -:  622:template <typename T1, typename T2>
        -:  623:void PrintTo(const ::std::tr1::tuple<T1, T2>& t, ::std::ostream* os) {
        -:  624:  PrintTupleTo(t, os);
        -:  625:}
        -:  626:
        -:  627:template <typename T1, typename T2, typename T3>
        -:  628:void PrintTo(const ::std::tr1::tuple<T1, T2, T3>& t, ::std::ostream* os) {
        -:  629:  PrintTupleTo(t, os);
        -:  630:}
        -:  631:
        -:  632:template <typename T1, typename T2, typename T3, typename T4>
        -:  633:void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4>& t, ::std::ostream* os) {
        -:  634:  PrintTupleTo(t, os);
        -:  635:}
        -:  636:
        -:  637:template <typename T1, typename T2, typename T3, typename T4, typename T5>
        -:  638:void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5>& t,
        -:  639:             ::std::ostream* os) {
        -:  640:  PrintTupleTo(t, os);
        -:  641:}
        -:  642:
        -:  643:template <typename T1, typename T2, typename T3, typename T4, typename T5,
        -:  644:          typename T6>
        -:  645:void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6>& t,
        -:  646:             ::std::ostream* os) {
        -:  647:  PrintTupleTo(t, os);
        -:  648:}
        -:  649:
        -:  650:template <typename T1, typename T2, typename T3, typename T4, typename T5,
        -:  651:          typename T6, typename T7>
        -:  652:void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7>& t,
        -:  653:             ::std::ostream* os) {
        -:  654:  PrintTupleTo(t, os);
        -:  655:}
        -:  656:
        -:  657:template <typename T1, typename T2, typename T3, typename T4, typename T5,
        -:  658:          typename T6, typename T7, typename T8>
        -:  659:void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8>& t,
        -:  660:             ::std::ostream* os) {
        -:  661:  PrintTupleTo(t, os);
        -:  662:}
        -:  663:
        -:  664:template <typename T1, typename T2, typename T3, typename T4, typename T5,
        -:  665:          typename T6, typename T7, typename T8, typename T9>
        -:  666:void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>& t,
        -:  667:             ::std::ostream* os) {
        -:  668:  PrintTupleTo(t, os);
        -:  669:}
        -:  670:
        -:  671:template <typename T1, typename T2, typename T3, typename T4, typename T5,
        -:  672:          typename T6, typename T7, typename T8, typename T9, typename T10>
        -:  673:void PrintTo(
        -:  674:    const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>& t,
        -:  675:    ::std::ostream* os) {
        -:  676:  PrintTupleTo(t, os);
        -:  677:}
        -:  678:#endif  // GTEST_HAS_TR1_TUPLE
        -:  679:
        -:  680:#if GTEST_HAS_STD_TUPLE_
        -:  681:template <typename... Types>
        -:  682:void PrintTo(const ::std::tuple<Types...>& t, ::std::ostream* os) {
        -:  683:  PrintTupleTo(t, os);
        -:  684:}
        -:  685:#endif  // GTEST_HAS_STD_TUPLE_
        -:  686:
        -:  687:// Overload for std::pair.
        -:  688:template <typename T1, typename T2>
        -:  689:void PrintTo(const ::std::pair<T1, T2>& value, ::std::ostream* os) {
        -:  690:  *os << '(';
        -:  691:  // We cannot use UniversalPrint(value.first, os) here, as T1 may be
        -:  692:  // a reference type.  The same for printing value.second.
        -:  693:  UniversalPrinter<T1>::Print(value.first, os);
        -:  694:  *os << ", ";
        -:  695:  UniversalPrinter<T2>::Print(value.second, os);
        -:  696:  *os << ')';
        -:  697:}
        -:  698:
        -:  699:// Implements printing a non-reference type T by letting the compiler
        -:  700:// pick the right overload of PrintTo() for T.
        -:  701:template <typename T>
        -:  702:class UniversalPrinter {
        -:  703: public:
        -:  704:  // MSVC warns about adding const to a function type, so we want to
        -:  705:  // disable the warning.
        -:  706:  GTEST_DISABLE_MSC_WARNINGS_PUSH_(4180)
        -:  707:
        -:  708:  // Note: we deliberately don't call this PrintTo(), as that name
        -:  709:  // conflicts with ::testing::internal::PrintTo in the body of the
        -:  710:  // function.
    #####:  711:  static void Print(const T& value, ::std::ostream* os) {
        -:  712:    // By default, ::testing::internal::PrintTo() is used for printing
        -:  713:    // the value.
        -:  714:    //
        -:  715:    // Thanks to Koenig look-up, if T is a class and has its own
        -:  716:    // PrintTo() function defined in its namespace, that function will
        -:  717:    // be visible here.  Since it is more specific than the generic ones
        -:  718:    // in ::testing::internal, it will be picked by the compiler in the
        -:  719:    // following statement - exactly what we want.
    #####:  720:    PrintTo(value, os);
    #####:  721:  }
        -:  722:
        -:  723:  GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  724:};
        -:  725:
        -:  726:// UniversalPrintArray(begin, len, os) prints an array of 'len'
        -:  727:// elements, starting at address 'begin'.
        -:  728:template <typename T>
        -:  729:void UniversalPrintArray(const T* begin, size_t len, ::std::ostream* os) {
        -:  730:  if (len == 0) {
        -:  731:    *os << "{}";
        -:  732:  } else {
        -:  733:    *os << "{ ";
        -:  734:    const size_t kThreshold = 18;
        -:  735:    const size_t kChunkSize = 8;
        -:  736:    // If the array has more than kThreshold elements, we'll have to
        -:  737:    // omit some details by printing only the first and the last
        -:  738:    // kChunkSize elements.
        -:  739:    // TODO(wan@google.com): let the user control the threshold using a flag.
        -:  740:    if (len <= kThreshold) {
        -:  741:      PrintRawArrayTo(begin, len, os);
        -:  742:    } else {
        -:  743:      PrintRawArrayTo(begin, kChunkSize, os);
        -:  744:      *os << ", ..., ";
        -:  745:      PrintRawArrayTo(begin + len - kChunkSize, kChunkSize, os);
        -:  746:    }
        -:  747:    *os << " }";
        -:  748:  }
        -:  749:}
        -:  750:// This overload prints a (const) char array compactly.
        -:  751:GTEST_API_ void UniversalPrintArray(
        -:  752:    const char* begin, size_t len, ::std::ostream* os);
        -:  753:
        -:  754:// This overload prints a (const) wchar_t array compactly.
        -:  755:GTEST_API_ void UniversalPrintArray(
        -:  756:    const wchar_t* begin, size_t len, ::std::ostream* os);
        -:  757:
        -:  758:// Implements printing an array type T[N].
        -:  759:template <typename T, size_t N>
        -:  760:class UniversalPrinter<T[N]> {
        -:  761: public:
        -:  762:  // Prints the given array, omitting some elements when there are too
        -:  763:  // many.
        -:  764:  static void Print(const T (&a)[N], ::std::ostream* os) {
        -:  765:    UniversalPrintArray(a, N, os);
        -:  766:  }
        -:  767:};
        -:  768:
        -:  769:// Implements printing a reference type T&.
        -:  770:template <typename T>
        -:  771:class UniversalPrinter<T&> {
        -:  772: public:
        -:  773:  // MSVC warns about adding const to a function type, so we want to
        -:  774:  // disable the warning.
        -:  775:  GTEST_DISABLE_MSC_WARNINGS_PUSH_(4180)
        -:  776:
        -:  777:  static void Print(const T& value, ::std::ostream* os) {
        -:  778:    // Prints the address of the value.  We use reinterpret_cast here
        -:  779:    // as static_cast doesn't compile when T is a function type.
        -:  780:    *os << "@" << reinterpret_cast<const void*>(&value) << " ";
        -:  781:
        -:  782:    // Then prints the value itself.
        -:  783:    UniversalPrint(value, os);
        -:  784:  }
        -:  785:
        -:  786:  GTEST_DISABLE_MSC_WARNINGS_POP_()
        -:  787:};
        -:  788:
        -:  789:// Prints a value tersely: for a reference type, the referenced value
        -:  790:// (but not the address) is printed; for a (const) char pointer, the
        -:  791:// NUL-terminated string (but not the pointer) is printed.
        -:  792:
        -:  793:template <typename T>
        -:  794:class UniversalTersePrinter {
        -:  795: public:
    #####:  796:  static void Print(const T& value, ::std::ostream* os) {
    #####:  797:    UniversalPrint(value, os);
    #####:  798:  }
        -:  799:};
        -:  800:template <typename T>
        -:  801:class UniversalTersePrinter<T&> {
        -:  802: public:
        -:  803:  static void Print(const T& value, ::std::ostream* os) {
        -:  804:    UniversalPrint(value, os);
        -:  805:  }
        -:  806:};
        -:  807:template <typename T, size_t N>
        -:  808:class UniversalTersePrinter<T[N]> {
        -:  809: public:
        -:  810:  static void Print(const T (&value)[N], ::std::ostream* os) {
        -:  811:    UniversalPrinter<T[N]>::Print(value, os);
        -:  812:  }
        -:  813:};
        -:  814:template <>
        -:  815:class UniversalTersePrinter<const char*> {
        -:  816: public:
    #####:  817:  static void Print(const char* str, ::std::ostream* os) {
    #####:  818:    if (str == NULL) {
    #####:  819:      *os << "NULL";
    #####:  820:    } else {
    #####:  821:      UniversalPrint(std::string(str), os);
        -:  822:    }
    #####:  823:  }
        -:  824:};
        -:  825:template <>
        -:  826:class UniversalTersePrinter<char*> {
        -:  827: public:
        -:  828:  static void Print(char* str, ::std::ostream* os) {
        -:  829:    UniversalTersePrinter<const char*>::Print(str, os);
        -:  830:  }
        -:  831:};
        -:  832:
        -:  833:#if GTEST_HAS_STD_WSTRING
        -:  834:template <>
        -:  835:class UniversalTersePrinter<const wchar_t*> {
        -:  836: public:
        -:  837:  static void Print(const wchar_t* str, ::std::ostream* os) {
        -:  838:    if (str == NULL) {
        -:  839:      *os << "NULL";
        -:  840:    } else {
        -:  841:      UniversalPrint(::std::wstring(str), os);
        -:  842:    }
        -:  843:  }
        -:  844:};
        -:  845:#endif
        -:  846:
        -:  847:template <>
        -:  848:class UniversalTersePrinter<wchar_t*> {
        -:  849: public:
        -:  850:  static void Print(wchar_t* str, ::std::ostream* os) {
        -:  851:    UniversalTersePrinter<const wchar_t*>::Print(str, os);
        -:  852:  }
        -:  853:};
        -:  854:
        -:  855:template <typename T>
        -:  856:void UniversalTersePrint(const T& value, ::std::ostream* os) {
        -:  857:  UniversalTersePrinter<T>::Print(value, os);
        -:  858:}
        -:  859:
        -:  860:// Prints a value using the type inferred by the compiler.  The
        -:  861:// difference between this and UniversalTersePrint() is that for a
        -:  862:// (const) char pointer, this prints both the pointer and the
        -:  863:// NUL-terminated string.
        -:  864:template <typename T>
    #####:  865:void UniversalPrint(const T& value, ::std::ostream* os) {
        -:  866:  // A workarond for the bug in VC++ 7.1 that prevents us from instantiating
        -:  867:  // UniversalPrinter with T directly.
        -:  868:  typedef T T1;
    #####:  869:  UniversalPrinter<T1>::Print(value, os);
    #####:  870:}
        -:  871:
        -:  872:typedef ::std::vector<string> Strings;
        -:  873:
        -:  874:// TuplePolicy<TupleT> must provide:
        -:  875:// - tuple_size
        -:  876://     size of tuple TupleT.
        -:  877:// - get<size_t I>(const TupleT& t)
        -:  878://     static function extracting element I of tuple TupleT.
        -:  879:// - tuple_element<size_t I>::type
        -:  880://     type of element I of tuple TupleT.
        -:  881:template <typename TupleT>
        -:  882:struct TuplePolicy;
        -:  883:
        -:  884:#if GTEST_HAS_TR1_TUPLE
        -:  885:template <typename TupleT>
        -:  886:struct TuplePolicy {
        -:  887:  typedef TupleT Tuple;
        -:  888:  static const size_t tuple_size = ::std::tr1::tuple_size<Tuple>::value;
        -:  889:
        -:  890:  template <size_t I>
        -:  891:  struct tuple_element : ::std::tr1::tuple_element<I, Tuple> {};
        -:  892:
        -:  893:  template <size_t I>
        -:  894:  static typename AddReference<
        -:  895:      const typename ::std::tr1::tuple_element<I, Tuple>::type>::type get(
        -:  896:      const Tuple& tuple) {
        -:  897:    return ::std::tr1::get<I>(tuple);
        -:  898:  }
        -:  899:};
        -:  900:template <typename TupleT>
        -:  901:const size_t TuplePolicy<TupleT>::tuple_size;
        -:  902:#endif  // GTEST_HAS_TR1_TUPLE
        -:  903:
        -:  904:#if GTEST_HAS_STD_TUPLE_
        -:  905:template <typename... Types>
        -:  906:struct TuplePolicy< ::std::tuple<Types...> > {
        -:  907:  typedef ::std::tuple<Types...> Tuple;
        -:  908:  static const size_t tuple_size = ::std::tuple_size<Tuple>::value;
        -:  909:
        -:  910:  template <size_t I>
        -:  911:  struct tuple_element : ::std::tuple_element<I, Tuple> {};
        -:  912:
        -:  913:  template <size_t I>
        -:  914:  static const typename ::std::tuple_element<I, Tuple>::type& get(
        -:  915:      const Tuple& tuple) {
        -:  916:    return ::std::get<I>(tuple);
        -:  917:  }
        -:  918:};
        -:  919:template <typename... Types>
        -:  920:const size_t TuplePolicy< ::std::tuple<Types...> >::tuple_size;
        -:  921:#endif  // GTEST_HAS_STD_TUPLE_
        -:  922:
        -:  923:#if GTEST_HAS_TR1_TUPLE || GTEST_HAS_STD_TUPLE_
        -:  924:// This helper template allows PrintTo() for tuples and
        -:  925:// UniversalTersePrintTupleFieldsToStrings() to be defined by
        -:  926:// induction on the number of tuple fields.  The idea is that
        -:  927:// TuplePrefixPrinter<N>::PrintPrefixTo(t, os) prints the first N
        -:  928:// fields in tuple t, and can be defined in terms of
        -:  929:// TuplePrefixPrinter<N - 1>.
        -:  930://
        -:  931:// The inductive case.
        -:  932:template <size_t N>
        -:  933:struct TuplePrefixPrinter {
        -:  934:  // Prints the first N fields of a tuple.
        -:  935:  template <typename Tuple>
        -:  936:  static void PrintPrefixTo(const Tuple& t, ::std::ostream* os) {
        -:  937:    TuplePrefixPrinter<N - 1>::PrintPrefixTo(t, os);
        -:  938:    GTEST_INTENTIONAL_CONST_COND_PUSH_()
        -:  939:    if (N > 1) {
        -:  940:    GTEST_INTENTIONAL_CONST_COND_POP_()
        -:  941:      *os << ", ";
        -:  942:    }
        -:  943:    UniversalPrinter<
        -:  944:        typename TuplePolicy<Tuple>::template tuple_element<N - 1>::type>
        -:  945:        ::Print(TuplePolicy<Tuple>::template get<N - 1>(t), os);
        -:  946:  }
        -:  947:
        -:  948:  // Tersely prints the first N fields of a tuple to a string vector,
        -:  949:  // one element for each field.
        -:  950:  template <typename Tuple>
        -:  951:  static void TersePrintPrefixToStrings(const Tuple& t, Strings* strings) {
        -:  952:    TuplePrefixPrinter<N - 1>::TersePrintPrefixToStrings(t, strings);
        -:  953:    ::std::stringstream ss;
        -:  954:    UniversalTersePrint(TuplePolicy<Tuple>::template get<N - 1>(t), &ss);
        -:  955:    strings->push_back(ss.str());
        -:  956:  }
        -:  957:};
        -:  958:
        -:  959:// Base case.
        -:  960:template <>
        -:  961:struct TuplePrefixPrinter<0> {
        -:  962:  template <typename Tuple>
        -:  963:  static void PrintPrefixTo(const Tuple&, ::std::ostream*) {}
        -:  964:
        -:  965:  template <typename Tuple>
        -:  966:  static void TersePrintPrefixToStrings(const Tuple&, Strings*) {}
        -:  967:};
        -:  968:
        -:  969:// Helper function for printing a tuple.
        -:  970:// Tuple must be either std::tr1::tuple or std::tuple type.
        -:  971:template <typename Tuple>
        -:  972:void PrintTupleTo(const Tuple& t, ::std::ostream* os) {
        -:  973:  *os << "(";
        -:  974:  TuplePrefixPrinter<TuplePolicy<Tuple>::tuple_size>::PrintPrefixTo(t, os);
        -:  975:  *os << ")";
        -:  976:}
        -:  977:
        -:  978:// Prints the fields of a tuple tersely to a string vector, one
        -:  979:// element for each field.  See the comment before
        -:  980:// UniversalTersePrint() for how we define "tersely".
        -:  981:template <typename Tuple>
        -:  982:Strings UniversalTersePrintTupleFieldsToStrings(const Tuple& value) {
        -:  983:  Strings result;
        -:  984:  TuplePrefixPrinter<TuplePolicy<Tuple>::tuple_size>::
        -:  985:      TersePrintPrefixToStrings(value, &result);
        -:  986:  return result;
        -:  987:}
        -:  988:#endif  // GTEST_HAS_TR1_TUPLE || GTEST_HAS_STD_TUPLE_
        -:  989:
        -:  990:}  // namespace internal
        -:  991:
        -:  992:template <typename T>
    #####:  993:::std::string PrintToString(const T& value) {
    #####:  994:  ::std::stringstream ss;
    #####:  995:  internal::UniversalTersePrinter<T>::Print(value, &ss);
    #####:  996:  return ss.str();
    #####:  997:}
        -:  998:
        -:  999:}  // namespace testing
        -: 1000:
        -: 1001:// Include any custom printer added by the local installation.
        -: 1002:// We must include this header at the end to make sure it can use the
        -: 1003:// declarations from this file.
        -: 1004:#include "gtest/internal/custom/gtest-printers.h"
        -: 1005:
        -: 1006:#endif  // GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_
