        -:    0:Source:openTest.cpp
        -:    0:Graph:coverage/openTest.gcno
        -:    0:Data:coverage/openTest.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "gtest/gtest.h"
        -:    2:
        -:    3:#include "file.h"
        -:    4:#include "test/Person.h"
        -:    5:#include "test/TestFileClass.h"
        -:    6:#include <stdio.h>
        -:    7:#include <unistd.h>
        -:    8:#include <sys/stat.h>
        -:    9:#include <sys/types.h>
        1:   10:#include <fcntl.h>
        -:   11:#include <errno.h>
        1:   12:
        -:   13:
        1:   14:namespace TC=ThorsAnvil::FileSystem::ColumnFormat;
        1:   15:using OpenTwoPeopleDirectoryFail = LockedTestDir;
        1:   16:using OpenTwoPeopleFileFail      = LockedFileDir;
        1:   17:using OpenNoFile                 = TestFileClass;
        1:   18:
        2:   19:
        6:   20:TEST(OpenNoFile, ConstructFile)
        1:   21:{
        1:   22:    // Just construct and destruct
        -:   23:    // Make sure it does not throw.
        2:   24:    TC::File<TwoPeople>    file;
        2:   25:}
        1:   26:
        4:   27:TEST(OpenNoFile, ConstructOFile)
        -:   28:{
        -:   29:    // Just construct and destruct
        -:   30:    // Make sure it does not throw.
        1:   31:    TC::OFile<TwoPeople>    file;
        1:   32:}
        -:   33:
        4:   34:TEST(OpenNoFile, ConstructIFile)
        -:   35:{
        -:   36:    {
        -:   37:        // Need a file to exist to be able to read.
        1:   38:        TC::OFile<TwoPeople>    file;
        1:   39:    }
        -:   40:
        -:   41:    // Just construct and destruct
        -:   42:    // Make sure it does not throw.
        1:   43:    TC::IFile<TwoPeople>    file;
        1:   44:}
        -:   45:
        4:   46:TEST_F(SimpleTestDir, ConstructFileWithNameNoMode)
        -:   47:{
        -:   48:    // Just construct and destruct
        1:   49:    TC::File<TwoPeople>    file(simpleTestDir);
        -:   50:
        1:   51:    if (getuid() != 0) {
        -:   52:        // Tests will fail if we are root.
        -:   53:        // So don't bother running them
        -:   54:
        1:   55:        ASSERT_FALSE(file);
        1:   56:    }
        1:   57:}
        -:   58:
        4:   59:TEST_F(SimpleTestDir, ConstructFileCallOpenWithNameNoMode)
        -:   60:{
        -:   61:    // Just construct and destruct
        1:   62:    TC::File<TwoPeople>    file;
        -:   63:
        1:   64:    file.open(simpleTestDir);
        1:   65:    if (getuid() != 0) {
        -:   66:        // Tests will fail if we are root.
        -:   67:        // So don't bother running them
        -:   68:
        1:   69:        ASSERT_FALSE(file);
        1:   70:    }
        1:   71:}
        -:   72:
        4:   73:TEST_F(SimpleTestDir, ConstructFileWithName)
        -:   74:{
        -:   75:    // Just construct and destruct
        1:   76:    TC::File<TwoPeople>    file(simpleTestDir, std::ios::out);
        1:   77:    ASSERT_TRUE(file);
        -:   78:
        -:   79:    // All files should be accessible.
        1:   80:    ASSERT_EQ(access((simpleTestDir + simpleP1Name).c_str(), R_OK | W_OK), 0);
        1:   81:    ASSERT_EQ(access((simpleTestDir + simpleP1Age).c_str(),  R_OK | W_OK), 0);
        1:   82:    ASSERT_EQ(access((simpleTestDir + simpleP1Dir).c_str(),  R_OK | W_OK | X_OK), 0);
        1:   83:    ASSERT_EQ(access((simpleTestDir + simpleP2Name).c_str(), R_OK | W_OK), 0);
        1:   84:    ASSERT_EQ(access((simpleTestDir + simpleP2Age).c_str(),  R_OK | W_OK), 0);
        1:   85:    ASSERT_EQ(access((simpleTestDir + simpleP2Dir).c_str(),  R_OK | W_OK | X_OK), 0);
        1:   86:    ASSERT_EQ(access((simpleTestDir            ).c_str(),    R_OK | W_OK | X_OK), 0);
        1:   87:    ASSERT_TRUE(file);
        1:   88:}
        -:   89:
        4:   90:TEST_F(SimpleTestDir, ConstructWithNameOpenFile)
        -:   91:{
        1:   92:    TC::File<TwoPeople>    file(simpleTestDir, std::ios::out);
        1:   93:    ASSERT_TRUE(file);
        -:   94:
        1:   95:    file.open(testSecondOpenDir.c_str(), std::ios::out);
        -:   96:
        1:   97:    if (getuid() != 0) {
        -:   98:        // Tests will fail if we are root.
        -:   99:        // So don't bother running them
        -:  100:
        1:  101:        ASSERT_FALSE(file);
        -:  102:
        1:  103:        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
        1:  104:    }
        1:  105:}
        -:  106:
        4:  107:TEST_F(SimpleTestDir, ConstructWithNameOpenOFile)
        -:  108:{
        1:  109:    TC::OFile<TwoPeople>   file(simpleTestDir);
        1:  110:    ASSERT_TRUE(file);
        -:  111:
        1:  112:    file.open(testSecondOpenDir.c_str());
        -:  113:
        1:  114:    if (getuid() != 0) {
        -:  115:        // Tests will fail if we are root.
        -:  116:        // So don't bother running them
        -:  117:
        1:  118:        ASSERT_FALSE(file);
        -:  119:
        1:  120:        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
        1:  121:    }
        1:  122:}
        -:  123:
        4:  124:TEST_F(SimpleTestDir, ConstructWithNameOpenIFile)
        -:  125:{
        -:  126:    {
        1:  127:        TC::OFile<TwoPeople>    file(simpleTestDir);
        1:  128:    }
        1:  129:    TC::IFile<TwoPeople>    file(simpleTestDir);
        1:  130:    ASSERT_TRUE(file);
        -:  131:
        1:  132:    file.open(testSecondOpenDir.c_str());
        -:  133:
        1:  134:    if (getuid() != 0) {
        -:  135:        // Tests will fail if we are root.
        -:  136:        // So don't bother running them
        -:  137:
        1:  138:        ASSERT_FALSE(file);
        -:  139:
        1:  140:        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
        1:  141:    }
        1:  142:}
        -:  143:
        4:  144:TEST_F(SimpleTestDir, OpenWithNameOpenFile)
        -:  145:{
        1:  146:    TC::File<TwoPeople>    file;
        -:  147:
        1:  148:    file.open(simpleTestDir, std::ios::out);
        1:  149:    ASSERT_TRUE(file);
        -:  150:
        1:  151:    file.open(testSecondOpenDir.c_str(), std::ios::out);
        -:  152:
        1:  153:    if (getuid() != 0) {
        -:  154:        // Tests will fail if we are root.
        -:  155:        // So don't bother running them
        -:  156:
        1:  157:        ASSERT_FALSE(file);
        -:  158:
        1:  159:        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
        1:  160:    }
        1:  161:}
        -:  162:
        4:  163:TEST_F(SimpleTestDir, OpenWithNameOpenOFile)
        -:  164:{
        1:  165:    TC::OFile<TwoPeople>   file;
        -:  166:
        1:  167:    file.open(simpleTestDir);
        1:  168:    ASSERT_TRUE(file);
        -:  169:
        1:  170:    file.open(testSecondOpenDir.c_str());
        -:  171:
        1:  172:    if (getuid() != 0) {
        -:  173:        // Tests will fail if we are root.
        -:  174:        // So don't bother running them
        -:  175:
        1:  176:        ASSERT_FALSE(file);
        -:  177:
        1:  178:        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
        1:  179:    }
        1:  180:}
        -:  181:
        4:  182:TEST_F(SimpleTestDir, OpenWithNameOpenIFile)
        -:  183:{
        -:  184:    {
        1:  185:        TC::OFile<TwoPeople>    file(simpleTestDir);
        1:  186:    }
        1:  187:    TC::IFile<TwoPeople>    file;
        -:  188:
        1:  189:    file.open(simpleTestDir);
        1:  190:    ASSERT_TRUE(file);
        -:  191:
        1:  192:    file.open(testSecondOpenDir.c_str());
        -:  193:
        1:  194:    if (getuid() != 0) {
        -:  195:        // Tests will fail if we are root.
        -:  196:        // So don't bother running them
        -:  197:
        1:  198:        ASSERT_FALSE(file);
        -:  199:
        1:  200:        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
        1:  201:    }
        1:  202:}
        -:  203:
        4:  204:TEST_F(SimpleTestDir, ConstructFileCallOpenWithName)
        -:  205:{
        -:  206:    // Just construct and destruct
        1:  207:    TC::File<TwoPeople>    file;
        -:  208:
        1:  209:    file.open(simpleTestDir, std::ios::out);
        1:  210:    ASSERT_TRUE(file);
        -:  211:
        -:  212:    // All files should be accessible.
        1:  213:    ASSERT_EQ(access((simpleTestDir + simpleP1Name).c_str(), R_OK | W_OK), 0);
        1:  214:    ASSERT_EQ(access((simpleTestDir + simpleP1Age).c_str(),  R_OK | W_OK), 0);
        1:  215:    ASSERT_EQ(access((simpleTestDir + simpleP1Dir).c_str(),  R_OK | W_OK | X_OK), 0);
        1:  216:    ASSERT_EQ(access((simpleTestDir + simpleP2Name).c_str(), R_OK | W_OK), 0);
        1:  217:    ASSERT_EQ(access((simpleTestDir + simpleP2Age).c_str(),  R_OK | W_OK), 0);
        1:  218:    ASSERT_EQ(access((simpleTestDir + simpleP2Dir).c_str(),  R_OK | W_OK | X_OK), 0);
        1:  219:    ASSERT_EQ(access((simpleTestDir            ).c_str(),    R_OK | W_OK | X_OK), 0);
        1:  220:    ASSERT_TRUE(file);
        1:  221:}
        -:  222:
        4:  223:TEST_F(SimpleTestDir, ConstructOFileWithName)
        -:  224:{
        -:  225:    // Just construct and destruct
        1:  226:    TC::OFile<TwoPeople>    file(simpleTestDir);
        1:  227:    ASSERT_TRUE(file);
        -:  228:
        -:  229:    // All files should be accessible.
        1:  230:    ASSERT_EQ(access((simpleTestDir + simpleP1Name).c_str(), R_OK | W_OK), 0);
        1:  231:    ASSERT_EQ(access((simpleTestDir + simpleP1Age).c_str(),  R_OK | W_OK), 0);
        1:  232:    ASSERT_EQ(access((simpleTestDir + simpleP1Dir).c_str(),  R_OK | W_OK | X_OK), 0);
        1:  233:    ASSERT_EQ(access((simpleTestDir + simpleP2Name).c_str(), R_OK | W_OK), 0);
        1:  234:    ASSERT_EQ(access((simpleTestDir + simpleP2Age).c_str(),  R_OK | W_OK), 0);
        1:  235:    ASSERT_EQ(access((simpleTestDir + simpleP2Dir).c_str(),  R_OK | W_OK | X_OK), 0);
        1:  236:    ASSERT_EQ(access((simpleTestDir            ).c_str(),    R_OK | W_OK | X_OK), 0);
        1:  237:    ASSERT_TRUE(file);
        1:  238:}
        -:  239:
        4:  240:TEST_F(SimpleTestDir, ConstructOFileCallOpenWithName)
        -:  241:{
        -:  242:    // Just construct and destruct
        1:  243:    TC::OFile<TwoPeople>    file;
        -:  244:
        1:  245:    file.open(simpleTestDir);
        1:  246:    ASSERT_TRUE(file);
        -:  247:
        -:  248:    // All files should be accessible.
        1:  249:    ASSERT_EQ(access((simpleTestDir + simpleP1Name).c_str(), R_OK | W_OK), 0);
        1:  250:    ASSERT_EQ(access((simpleTestDir + simpleP1Age).c_str(),  R_OK | W_OK), 0);
        1:  251:    ASSERT_EQ(access((simpleTestDir + simpleP1Dir).c_str(),  R_OK | W_OK | X_OK), 0);
        1:  252:    ASSERT_EQ(access((simpleTestDir + simpleP2Name).c_str(), R_OK | W_OK), 0);
        1:  253:    ASSERT_EQ(access((simpleTestDir + simpleP2Age).c_str(),  R_OK | W_OK), 0);
        1:  254:    ASSERT_EQ(access((simpleTestDir + simpleP2Dir).c_str(),  R_OK | W_OK | X_OK), 0);
        1:  255:    ASSERT_EQ(access((simpleTestDir            ).c_str(),    R_OK | W_OK | X_OK), 0);
        1:  256:    ASSERT_TRUE(file);
        1:  257:}
        -:  258:
        4:  259:TEST_F(SimpleTestDir, ConstructIFileWithName)
        -:  260:{
        -:  261:    // Just construct and destruct
        1:  262:    TC::IFile<TwoPeople>    file(simpleTestDir);
        -:  263:
        1:  264:    if (getuid() != 0) {
        -:  265:        // Tests will fail if we are root.
        -:  266:        // So don't bother running them
        -:  267:
        1:  268:        ASSERT_FALSE(file);
        1:  269:    }
        1:  270:}
        -:  271:
        4:  272:TEST_F(SimpleTestDir, ConstructIFileCallOpenWithName)
        -:  273:{
        -:  274:    // Just construct and destruct
        1:  275:    TC::IFile<TwoPeople>    file;
        -:  276:
        1:  277:    file.open(simpleTestDir);
        -:  278:
        1:  279:    if (getuid() != 0) {
        -:  280:        // Tests will fail if we are root.
        -:  281:        // So don't bother running them
        -:  282:
        1:  283:        ASSERT_FALSE(file);
        1:  284:    }
        1:  285:}
        -:  286:
        4:  287:TEST_F(SimpleTestDir, ConstructIFileWithNameWithExistingFile)
        -:  288:{
        -:  289:    {
        -:  290:        // Make Sure file exists first.
        1:  291:        TC::OFile<TwoPeople>    file(simpleTestDir);
        1:  292:    }
        -:  293:
        -:  294:    // Just construct and destruct
        1:  295:    TC::IFile<TwoPeople>    file(simpleTestDir);
        1:  296:    ASSERT_TRUE(file);
        1:  297:}
        -:  298:
        4:  299:TEST_F(SimpleTestDir, ConstructIFileCallOpenWithNameWithExistingFile)
        -:  300:{
        -:  301:    {
        -:  302:        // Make Sure file exists first.
        1:  303:        TC::OFile<TwoPeople>    file(simpleTestDir);
        1:  304:    }
        -:  305:
        -:  306:    // Just construct and destruct
        1:  307:    TC::IFile<TwoPeople>    file;
        -:  308:
        1:  309:    file.open(simpleTestDir);
        1:  310:    ASSERT_TRUE(file);
        1:  311:}
        -:  312:
        4:  313:TEST_F(LockedTestDir, ConstructFileWithName)
        -:  314:{
        -:  315:    // Just construct and destruct
        1:  316:    TC::File<TwoPeople>    file(lockedTestDir);
        -:  317:
        1:  318:    if (getuid() != 0) {
        -:  319:        // Tests will fail if we are root.
        -:  320:        // So don't bother running them
        -:  321:
        1:  322:        ASSERT_FALSE(file);
        -:  323:
        -:  324:        // No files should exist
        1:  325:        ASSERT_EQ(access((lockedTestDir + simpleP1Name).c_str(), F_OK), -1);
        1:  326:        ASSERT_EQ(access((lockedTestDir + simpleP1Age).c_str(),  F_OK), -1);
        1:  327:        ASSERT_EQ(access((lockedTestDir + simpleP1Dir).c_str(),  F_OK), -1);
        1:  328:        ASSERT_EQ(access((lockedTestDir + simpleP2Name).c_str(), F_OK), -1);
        1:  329:        ASSERT_EQ(access((lockedTestDir + simpleP2Age).c_str(),  F_OK), -1);
        1:  330:        ASSERT_EQ(access((lockedTestDir + simpleP2Dir).c_str(),  F_OK), -1);
        1:  331:        ASSERT_FALSE(file);
        1:  332:    }
        -:  333:
        -:  334:    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
        1:  335:    ASSERT_EQ(access(lockedTestDir.c_str(),    F_OK), 0);
        1:  336:}
        -:  337:
        4:  338:TEST_F(LockedTestDir, ConstructFileCallOpenWithName)
        -:  339:{
        -:  340:    // Just construct and destruct
        1:  341:    TC::File<TwoPeople>    file;
        -:  342:
        1:  343:    file.open(lockedTestDir);
        -:  344:
        1:  345:    if (getuid() != 0) {
        -:  346:        // Tests will fail if we are root.
        -:  347:        // So don't bother running them
        -:  348:
        1:  349:        ASSERT_FALSE(file);
        -:  350:
        -:  351:        // No files should exist
        1:  352:        ASSERT_EQ(access((lockedTestDir + simpleP1Name).c_str(), F_OK), -1);
        1:  353:        ASSERT_EQ(access((lockedTestDir + simpleP1Age).c_str(),  F_OK), -1);
        1:  354:        ASSERT_EQ(access((lockedTestDir + simpleP1Dir).c_str(),  F_OK), -1);
        1:  355:        ASSERT_EQ(access((lockedTestDir + simpleP2Name).c_str(), F_OK), -1);
        1:  356:        ASSERT_EQ(access((lockedTestDir + simpleP2Age).c_str(),  F_OK), -1);
        1:  357:        ASSERT_EQ(access((lockedTestDir + simpleP2Dir).c_str(),  F_OK), -1);
        1:  358:        ASSERT_FALSE(file);
        1:  359:    }
        -:  360:
        -:  361:    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
        1:  362:    ASSERT_EQ(access(lockedTestDir.c_str(),    F_OK), 0);
        1:  363:}
        -:  364:
        4:  365:TEST_F(LockedTestDir, ConstructOFileWithName)
        -:  366:{
        -:  367:    // Just construct and destruct
        1:  368:    TC::OFile<TwoPeople>    file(lockedTestDir);
        -:  369:
        1:  370:    if (getuid() != 0) {
        -:  371:        // Tests will fail if we are root.
        -:  372:        // So don't bother running them
        -:  373:
        1:  374:        ASSERT_FALSE(file);
        -:  375:
        -:  376:        // No files should exist
        1:  377:        ASSERT_EQ(access((lockedTestDir + simpleP1Name).c_str(), F_OK), -1);
        1:  378:        ASSERT_EQ(access((lockedTestDir + simpleP1Age).c_str(),  F_OK), -1);
        1:  379:        ASSERT_EQ(access((lockedTestDir + simpleP1Dir).c_str(),  F_OK), -1);
        1:  380:        ASSERT_EQ(access((lockedTestDir + simpleP2Name).c_str(), F_OK), -1);
        1:  381:        ASSERT_EQ(access((lockedTestDir + simpleP2Age).c_str(),  F_OK), -1);
        1:  382:        ASSERT_EQ(access((lockedTestDir + simpleP2Dir).c_str(),  F_OK), -1);
        1:  383:        ASSERT_FALSE(file);
        1:  384:    }
        -:  385:
        -:  386:    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
        1:  387:    ASSERT_EQ(access(lockedTestDir.c_str(),    F_OK), 0);
        1:  388:}
        -:  389:
        4:  390:TEST_F(LockedTestDir, ConstructOFileCallOpenWithName)
        -:  391:{
        -:  392:    // Just construct and destruct
        1:  393:    TC::OFile<TwoPeople>    file;
        -:  394:
        1:  395:    file.open(lockedTestDir);
        -:  396:
        1:  397:    if (getuid() != 0) {
        -:  398:        // Tests will fail if we are root.
        -:  399:        // So don't bother running them
        -:  400:
        1:  401:        ASSERT_FALSE(file);
        -:  402:
        -:  403:        // No files should exist
        1:  404:        ASSERT_EQ(access((lockedTestDir + simpleP1Name).c_str(), F_OK), -1);
        1:  405:        ASSERT_EQ(access((lockedTestDir + simpleP1Age).c_str(),  F_OK), -1);
        1:  406:        ASSERT_EQ(access((lockedTestDir + simpleP1Dir).c_str(),  F_OK), -1);
        1:  407:        ASSERT_EQ(access((lockedTestDir + simpleP2Name).c_str(), F_OK), -1);
        1:  408:        ASSERT_EQ(access((lockedTestDir + simpleP2Age).c_str(),  F_OK), -1);
        1:  409:        ASSERT_EQ(access((lockedTestDir + simpleP2Dir).c_str(),  F_OK), -1);
        1:  410:        ASSERT_FALSE(file);
        1:  411:    }
        -:  412:
        -:  413:    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
        1:  414:    ASSERT_EQ(access(lockedTestDir.c_str(),    F_OK), 0);
        1:  415:}
        -:  416:
        4:  417:TEST_F(LockedFileDir, ConstructFileWithName)
        -:  418:{
        -:  419:    // Just construct and destruct
        1:  420:    TC::File<TwoPeople>    file(lockedFileDir);
        -:  421:
        1:  422:    if (getuid() != 0) {
        -:  423:        // Tests will fail if we are root.
        -:  424:        // So don't bother running them
        -:  425:
        1:  426:        ASSERT_FALSE(file);
        -:  427:
        -:  428:        // No files should exist
        1:  429:        ASSERT_EQ(access((lockedFileDir + simpleP1Name).c_str(), F_OK), -1);
        1:  430:        ASSERT_EQ(access((lockedFileDir + simpleP1Age).c_str(),  F_OK), -1);
        1:  431:        ASSERT_EQ(access((lockedFileDir + simpleP1Dir).c_str(),  F_OK), -1);
        1:  432:        ASSERT_EQ(access((lockedFileDir + simpleP2Age).c_str(),  F_OK), -1);
        1:  433:        ASSERT_FALSE(file);
        1:  434:    }
        -:  435:
        -:  436:    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
        1:  437:    ASSERT_EQ(access((lockedFileDir + simpleP2Name).c_str(), F_OK), 0);
        1:  438:    ASSERT_EQ(access((lockedFileDir + simpleP2Dir).c_str(),  F_OK), 0);
        1:  439:    ASSERT_EQ(access((lockedFileDir            ).c_str(),    F_OK), 0);
        1:  440:}
        -:  441:
        4:  442:TEST_F(LockedFileDir, ConstructFileCallOpenWithName)
        -:  443:{
        -:  444:    // Just construct and destruct
        1:  445:    TC::File<TwoPeople>    file;
        -:  446:
        1:  447:    file.open(lockedFileDir);
        -:  448:
        1:  449:    if (getuid() != 0) {
        -:  450:        // Tests will fail if we are root.
        -:  451:        // So don't bother running them
        -:  452:
        1:  453:        ASSERT_FALSE(file);
        -:  454:
        -:  455:        // No files should exist
        1:  456:        ASSERT_EQ(access((lockedFileDir + simpleP1Name).c_str(), F_OK), -1);
        1:  457:        ASSERT_EQ(access((lockedFileDir + simpleP1Age).c_str(),  F_OK), -1);
        1:  458:        ASSERT_EQ(access((lockedFileDir + simpleP1Dir).c_str(),  F_OK), -1);
        1:  459:        ASSERT_EQ(access((lockedFileDir + simpleP2Age).c_str(),  F_OK), -1);
        1:  460:        ASSERT_FALSE(file);
        1:  461:    }
        -:  462:
        -:  463:    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
        1:  464:    ASSERT_EQ(access((lockedFileDir + simpleP2Name).c_str(), F_OK), 0);
        1:  465:    ASSERT_EQ(access((lockedFileDir + simpleP2Dir).c_str(),  F_OK), 0);
        1:  466:    ASSERT_EQ(access((lockedFileDir            ).c_str(),    F_OK), 0);
        1:  467:}
        -:  468:
        4:  469:TEST_F(LockedFileDir, ConstructOFileWithName)
        -:  470:{
        -:  471:    // Just construct and destruct
        1:  472:    TC::OFile<TwoPeople>    file(lockedFileDir);
        -:  473:
        1:  474:    if (getuid() != 0) {
        -:  475:        // Tests will fail if we are root.
        -:  476:        // So don't bother running them
        -:  477:
        1:  478:        ASSERT_FALSE(file);
        -:  479:
        -:  480:        // No files should exist
        1:  481:        ASSERT_EQ(access((lockedFileDir + simpleP1Name).c_str(), F_OK), -1);
        1:  482:        ASSERT_EQ(access((lockedFileDir + simpleP1Age).c_str(),  F_OK), -1);
        1:  483:        ASSERT_EQ(access((lockedFileDir + simpleP1Dir).c_str(),  F_OK), -1);
        1:  484:        ASSERT_EQ(access((lockedFileDir + simpleP2Age).c_str(),  F_OK), -1);
        1:  485:        ASSERT_FALSE(file);
        1:  486:    }
        -:  487:
        -:  488:    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
        1:  489:    ASSERT_EQ(access((lockedFileDir + simpleP2Name).c_str(), F_OK), 0);
        1:  490:    ASSERT_EQ(access((lockedFileDir + simpleP2Dir).c_str(),  F_OK), 0);
        1:  491:    ASSERT_EQ(access((lockedFileDir            ).c_str(),    F_OK), 0);
        1:  492:}
        -:  493:
        4:  494:TEST_F(OpenTwoPeopleFileFail, ConstructOFileCallOpenWithName)
        -:  495:{
        -:  496:    // Just construct and destruct
        1:  497:    TC::OFile<TwoPeople>    file;
        -:  498:
        1:  499:    file.open(lockedFileDir);
        -:  500:
        1:  501:    if (getuid() != 0) {
        -:  502:        // Tests will fail if we are root.
        -:  503:        // So don't bother running them
        -:  504:
        1:  505:        ASSERT_FALSE(file);
        -:  506:
        -:  507:        // No files should exist
        1:  508:        ASSERT_EQ(access((lockedFileDir + simpleP1Name).c_str(), F_OK), -1);
        1:  509:        ASSERT_EQ(access((lockedFileDir + simpleP1Age).c_str(),  F_OK), -1);
        1:  510:        ASSERT_EQ(access((lockedFileDir + simpleP1Dir).c_str(),  F_OK), -1);
        1:  511:        ASSERT_EQ(access((lockedFileDir + simpleP2Age).c_str(),  F_OK), -1);
        1:  512:        ASSERT_FALSE(file);
        1:  513:    }
        -:  514:
        -:  515:    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
        1:  516:    ASSERT_EQ(access((lockedFileDir + simpleP2Name).c_str(), F_OK), 0);
        1:  517:    ASSERT_EQ(access((lockedFileDir + simpleP2Dir).c_str(),  F_OK), 0);
        1:  518:    ASSERT_EQ(access((lockedFileDir            ).c_str(),    F_OK), 0);
        1:  519:}
        -:  520:
        -:  521:
        -:  522:
