#include "gtest/gtest.h"

#include "file.h"
#include "test/Person.h"
#include "test/TestFileClass.h"
#include <stdio.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <errno.h>


namespace TC=ThorsAnvil::FileSystem::ColumnFormat;
using OpenTwoPeopleDirectoryFail = LockedTestDir;
using OpenTwoPeopleFileFail      = LockedFileDir;
using OpenNoFile                 = TestFileClass;


TEST(OpenNoFile, ConstructFile)
{
    // Just construct and destruct
    // Make sure it does not throw.
    TC::File<TwoPeople>    file;
}

TEST(OpenNoFile, ConstructOFile)
{
    // Just construct and destruct
    // Make sure it does not throw.
    TC::OFile<TwoPeople>    file;
}

TEST(OpenNoFile, ConstructIFile)
{
    {
        // Need a file to exist to be able to read.
        TC::OFile<TwoPeople>    file;
    }

    // Just construct and destruct
    // Make sure it does not throw.
    TC::IFile<TwoPeople>    file;
}

TEST_F(SimpleTestDir, ConstructFileWithNameNoMode)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(simpleTestDir);

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);
    }
}

TEST_F(SimpleTestDir, ConstructFileCallOpenWithNameNoMode)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file;

    file.open(simpleTestDir);
    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);
    }
}

TEST_F(SimpleTestDir, ConstructFileWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(simpleTestDir, std::ios::out);
    ASSERT_TRUE(file);

    // All files should be accessible.
    ASSERT_EQ(access((simpleTestDir + simpleP1Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir            ).c_str(),    R_OK | W_OK | X_OK), 0);
    ASSERT_TRUE(file);
}

TEST_F(SimpleTestDir, ConstructWithNameOpenFile)
{
    TC::File<TwoPeople>    file(simpleTestDir, std::ios::out);
    ASSERT_TRUE(file);

    file.open(testSecondOpenDir.c_str(), std::ios::out);

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
    }
}

TEST_F(SimpleTestDir, ConstructWithNameOpenOFile)
{
    TC::OFile<TwoPeople>   file(simpleTestDir);
    ASSERT_TRUE(file);

    file.open(testSecondOpenDir.c_str());

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
    }
}

TEST_F(SimpleTestDir, ConstructWithNameOpenIFile)
{
    {
        TC::OFile<TwoPeople>    file(simpleTestDir);
    }
    TC::IFile<TwoPeople>    file(simpleTestDir);
    ASSERT_TRUE(file);

    file.open(testSecondOpenDir.c_str());

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
    }
}

TEST_F(SimpleTestDir, OpenWithNameOpenFile)
{
    TC::File<TwoPeople>    file;

    file.open(simpleTestDir, std::ios::out);
    ASSERT_TRUE(file);

    file.open(testSecondOpenDir.c_str(), std::ios::out);

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
    }
}

TEST_F(SimpleTestDir, OpenWithNameOpenOFile)
{
    TC::OFile<TwoPeople>   file;

    file.open(simpleTestDir);
    ASSERT_TRUE(file);

    file.open(testSecondOpenDir.c_str());

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
    }
}

TEST_F(SimpleTestDir, OpenWithNameOpenIFile)
{
    {
        TC::OFile<TwoPeople>    file(simpleTestDir);
    }
    TC::IFile<TwoPeople>    file;

    file.open(simpleTestDir);
    ASSERT_TRUE(file);

    file.open(testSecondOpenDir.c_str());

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
    }
}

TEST_F(SimpleTestDir, ConstructFileCallOpenWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file;

    file.open(simpleTestDir, std::ios::out);
    ASSERT_TRUE(file);

    // All files should be accessible.
    ASSERT_EQ(access((simpleTestDir + simpleP1Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir            ).c_str(),    R_OK | W_OK | X_OK), 0);
    ASSERT_TRUE(file);
}

TEST_F(SimpleTestDir, ConstructOFileWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file(simpleTestDir);
    ASSERT_TRUE(file);

    // All files should be accessible.
    ASSERT_EQ(access((simpleTestDir + simpleP1Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir            ).c_str(),    R_OK | W_OK | X_OK), 0);
    ASSERT_TRUE(file);
}

TEST_F(SimpleTestDir, ConstructOFileCallOpenWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file;

    file.open(simpleTestDir);
    ASSERT_TRUE(file);

    // All files should be accessible.
    ASSERT_EQ(access((simpleTestDir + simpleP1Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir            ).c_str(),    R_OK | W_OK | X_OK), 0);
    ASSERT_TRUE(file);
}

TEST_F(SimpleTestDir, ConstructIFileWithName)
{
    // Just construct and destruct
    TC::IFile<TwoPeople>    file(simpleTestDir);

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);
    }
}

TEST_F(SimpleTestDir, ConstructIFileCallOpenWithName)
{
    // Just construct and destruct
    TC::IFile<TwoPeople>    file;

    file.open(simpleTestDir);

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);
    }
}

TEST_F(SimpleTestDir, ConstructIFileWithNameWithExistingFile)
{
    {
        // Make Sure file exists first.
        TC::OFile<TwoPeople>    file(simpleTestDir);
    }

    // Just construct and destruct
    TC::IFile<TwoPeople>    file(simpleTestDir);
    ASSERT_TRUE(file);
}

TEST_F(SimpleTestDir, ConstructIFileCallOpenWithNameWithExistingFile)
{
    {
        // Make Sure file exists first.
        TC::OFile<TwoPeople>    file(simpleTestDir);
    }

    // Just construct and destruct
    TC::IFile<TwoPeople>    file;

    file.open(simpleTestDir);
    ASSERT_TRUE(file);
}

TEST_F(LockedTestDir, ConstructFileWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(lockedTestDir);

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedTestDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Dir).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
    ASSERT_EQ(access(lockedTestDir.c_str(),    F_OK), 0);
}

TEST_F(LockedTestDir, ConstructFileCallOpenWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file;

    file.open(lockedTestDir);

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedTestDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Dir).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
    ASSERT_EQ(access(lockedTestDir.c_str(),    F_OK), 0);
}

TEST_F(LockedTestDir, ConstructOFileWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file(lockedTestDir);

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedTestDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Dir).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
    ASSERT_EQ(access(lockedTestDir.c_str(),    F_OK), 0);
}

TEST_F(LockedTestDir, ConstructOFileCallOpenWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file;

    file.open(lockedTestDir);

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedTestDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Dir).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
    ASSERT_EQ(access(lockedTestDir.c_str(),    F_OK), 0);
}

TEST_F(LockedFileDir, ConstructFileWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(lockedFileDir);

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedFileDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
    ASSERT_EQ(access((lockedFileDir + simpleP2Name).c_str(), F_OK), 0);
    ASSERT_EQ(access((lockedFileDir + simpleP2Dir).c_str(),  F_OK), 0);
    ASSERT_EQ(access((lockedFileDir            ).c_str(),    F_OK), 0);
}

TEST_F(LockedFileDir, ConstructFileCallOpenWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file;

    file.open(lockedFileDir);

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedFileDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
    ASSERT_EQ(access((lockedFileDir + simpleP2Name).c_str(), F_OK), 0);
    ASSERT_EQ(access((lockedFileDir + simpleP2Dir).c_str(),  F_OK), 0);
    ASSERT_EQ(access((lockedFileDir            ).c_str(),    F_OK), 0);
}

TEST_F(LockedFileDir, ConstructOFileWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file(lockedFileDir);

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedFileDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
    ASSERT_EQ(access((lockedFileDir + simpleP2Name).c_str(), F_OK), 0);
    ASSERT_EQ(access((lockedFileDir + simpleP2Dir).c_str(),  F_OK), 0);
    ASSERT_EQ(access((lockedFileDir            ).c_str(),    F_OK), 0);
}

TEST_F(OpenTwoPeopleFileFail, ConstructOFileCallOpenWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file;

    file.open(lockedFileDir);

    if (getuid() != 0) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedFileDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
    ASSERT_EQ(access((lockedFileDir + simpleP2Name).c_str(), F_OK), 0);
    ASSERT_EQ(access((lockedFileDir + simpleP2Dir).c_str(),  F_OK), 0);
    ASSERT_EQ(access((lockedFileDir            ).c_str(),    F_OK), 0);
}



