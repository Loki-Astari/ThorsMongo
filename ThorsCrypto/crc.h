#ifndef THORSANVIL_CRYPTO_CRC_H
#define THORSANVIL_CRYPTO_CRC_H

#include "ThorsCryptoConfig.h"
#include <cstdint>

namespace ThorsAnvil::Crypto
{

class CRC32
{
    protected:
        static constexpr std::uint32_t table[256] =
        {
            0x00000000ul, 0x77073096ul, 0xEE0E612Cul, 0x990951BAul, 0x076DC419ul, 0x706AF48Ful, 0xE963A535ul, 0x9E6495A3ul,
            0x0EDB8832ul, 0x79DCB8A4ul, 0xE0D5E91Eul, 0x97D2D988ul, 0x09B64C2Bul, 0x7EB17CBDul, 0xE7B82D07ul, 0x90BF1D91ul,
            0x1DB71064ul, 0x6AB020F2ul, 0xF3B97148ul, 0x84BE41DEul, 0x1ADAD47Dul, 0x6DDDE4EBul, 0xF4D4B551ul, 0x83D385C7ul,
            0x136C9856ul, 0x646BA8C0ul, 0xFD62F97Aul, 0x8A65C9ECul, 0x14015C4Ful, 0x63066CD9ul, 0xFA0F3D63ul, 0x8D080DF5ul,
            0x3B6E20C8ul, 0x4C69105Eul, 0xD56041E4ul, 0xA2677172ul, 0x3C03E4D1ul, 0x4B04D447ul, 0xD20D85FDul, 0xA50AB56Bul,
            0x35B5A8FAul, 0x42B2986Cul, 0xDBBBC9D6ul, 0xACBCF940ul, 0x32D86CE3ul, 0x45DF5C75ul, 0xDCD60DCFul, 0xABD13D59ul,
            0x26D930ACul, 0x51DE003Aul, 0xC8D75180ul, 0xBFD06116ul, 0x21B4F4B5ul, 0x56B3C423ul, 0xCFBA9599ul, 0xB8BDA50Ful,
            0x2802B89Eul, 0x5F058808ul, 0xC60CD9B2ul, 0xB10BE924ul, 0x2F6F7C87ul, 0x58684C11ul, 0xC1611DABul, 0xB6662D3Dul,
            0x76DC4190ul, 0x01DB7106ul, 0x98D220BCul, 0xEFD5102Aul, 0x71B18589ul, 0x06B6B51Ful, 0x9FBFE4A5ul, 0xE8B8D433ul,
            0x7807C9A2ul, 0x0F00F934ul, 0x9609A88Eul, 0xE10E9818ul, 0x7F6A0DBBul, 0x086D3D2Dul, 0x91646C97ul, 0xE6635C01ul,
            0x6B6B51F4ul, 0x1C6C6162ul, 0x856530D8ul, 0xF262004Eul, 0x6C0695EDul, 0x1B01A57Bul, 0x8208F4C1ul, 0xF50FC457ul,
            0x65B0D9C6ul, 0x12B7E950ul, 0x8BBEB8EAul, 0xFCB9887Cul, 0x62DD1DDFul, 0x15DA2D49ul, 0x8CD37CF3ul, 0xFBD44C65ul,
            0x4DB26158ul, 0x3AB551CEul, 0xA3BC0074ul, 0xD4BB30E2ul, 0x4ADFA541ul, 0x3DD895D7ul, 0xA4D1C46Dul, 0xD3D6F4FBul,
            0x4369E96Aul, 0x346ED9FCul, 0xAD678846ul, 0xDA60B8D0ul, 0x44042D73ul, 0x33031DE5ul, 0xAA0A4C5Ful, 0xDD0D7CC9ul,
            0x5005713Cul, 0x270241AAul, 0xBE0B1010ul, 0xC90C2086ul, 0x5768B525ul, 0x206F85B3ul, 0xB966D409ul, 0xCE61E49Ful,
            0x5EDEF90Eul, 0x29D9C998ul, 0xB0D09822ul, 0xC7D7A8B4ul, 0x59B33D17ul, 0x2EB40D81ul, 0xB7BD5C3Bul, 0xC0BA6CADul,
            0xEDB88320ul, 0x9ABFB3B6ul, 0x03B6E20Cul, 0x74B1D29Aul, 0xEAD54739ul, 0x9DD277AFul, 0x04DB2615ul, 0x73DC1683ul,
            0xE3630B12ul, 0x94643B84ul, 0x0D6D6A3Eul, 0x7A6A5AA8ul, 0xE40ECF0Bul, 0x9309FF9Dul, 0x0A00AE27ul, 0x7D079EB1ul,
            0xF00F9344ul, 0x8708A3D2ul, 0x1E01F268ul, 0x6906C2FEul, 0xF762575Dul, 0x806567CBul, 0x196C3671ul, 0x6E6B06E7ul,
            0xFED41B76ul, 0x89D32BE0ul, 0x10DA7A5Aul, 0x67DD4ACCul, 0xF9B9DF6Ful, 0x8EBEEFF9ul, 0x17B7BE43ul, 0x60B08ED5ul,
            0xD6D6A3E8ul, 0xA1D1937Eul, 0x38D8C2C4ul, 0x4FDFF252ul, 0xD1BB67F1ul, 0xA6BC5767ul, 0x3FB506DDul, 0x48B2364Bul,
            0xD80D2BDAul, 0xAF0A1B4Cul, 0x36034AF6ul, 0x41047A60ul, 0xDF60EFC3ul, 0xA867DF55ul, 0x316E8EEFul, 0x4669BE79ul,
            0xCB61B38Cul, 0xBC66831Aul, 0x256FD2A0ul, 0x5268E236ul, 0xCC0C7795ul, 0xBB0B4703ul, 0x220216B9ul, 0x5505262Ful,
            0xC5BA3BBEul, 0xB2BD0B28ul, 0x2BB45A92ul, 0x5CB36A04ul, 0xC2D7FFA7ul, 0xB5D0CF31ul, 0x2CD99E8Bul, 0x5BDEAE1Dul,
            0x9B64C2B0ul, 0xEC63F226ul, 0x756AA39Cul, 0x026D930Aul, 0x9C0906A9ul, 0xEB0E363Ful, 0x72076785ul, 0x05005713ul,
            0x95BF4A82ul, 0xE2B87A14ul, 0x7BB12BAEul, 0x0CB61B38ul, 0x92D28E9Bul, 0xE5D5BE0Dul, 0x7CDCEFB7ul, 0x0BDBDF21ul,
            0x86D3D2D4ul, 0xF1D4E242ul, 0x68DDB3F8ul, 0x1FDA836Eul, 0x81BE16CDul, 0xF6B9265Bul, 0x6FB077E1ul, 0x18B74777ul,
            0x88085AE6ul, 0xFF0F6A70ul, 0x66063BCAul, 0x11010B5Cul, 0x8F659EFFul, 0xF862AE69ul, 0x616BFFD3ul, 0x166CCF45ul,
            0xA00AE278ul, 0xD70DD2EEul, 0x4E048354ul, 0x3903B3C2ul, 0xA7672661ul, 0xD06016F7ul, 0x4969474Dul, 0x3E6E77DBul,
            0xAED16A4Aul, 0xD9D65ADCul, 0x40DF0B66ul, 0x37D83BF0ul, 0xA9BCAE53ul, 0xDEBB9EC5ul, 0x47B2CF7Ful, 0x30B5FFE9ul,
            0xBDBDF21Cul, 0xCABAC28Aul, 0x53B39330ul, 0x24B4A3A6ul, 0xBAD03605ul, 0xCDD70693ul, 0x54DE5729ul, 0x23D967BFul,
            0xB3667A2Eul, 0xC4614AB8ul, 0x5D681B02ul, 0x2A6F2B94ul, 0xB40BBE37ul, 0xC30C8EA1ul, 0x5A05DF1Bul, 0x2D02EF8Dul
        };

};

class CRC32C
{
    protected:
        static constexpr std::uint32_t table[256] =
        {
            0x00000000ul, 0xf26b8303ul, 0xe13b70f7ul, 0x1350f3f4ul, 0xc79a971ful, 0x35f1141cul, 0x26a1e7e8ul, 0xd4ca64ebul,
            0x8ad958cful, 0x78b2dbccul, 0x6be22838ul, 0x9989ab3bul, 0x4d43cfd0ul, 0xbf284cd3ul, 0xac78bf27ul, 0x5e133c24ul,
            0x105ec76ful, 0xe235446cul, 0xf165b798ul, 0x030e349bul, 0xd7c45070ul, 0x25afd373ul, 0x36ff2087ul, 0xc494a384ul,
            0x9a879fa0ul, 0x68ec1ca3ul, 0x7bbcef57ul, 0x89d76c54ul, 0x5d1d08bful, 0xaf768bbcul, 0xbc267848ul, 0x4e4dfb4bul,
            0x20bd8edeul, 0xd2d60dddul, 0xc186fe29ul, 0x33ed7d2aul, 0xe72719c1ul, 0x154c9ac2ul, 0x061c6936ul, 0xf477ea35ul,
            0xaa64d611ul, 0x580f5512ul, 0x4b5fa6e6ul, 0xb93425e5ul, 0x6dfe410eul, 0x9f95c20dul, 0x8cc531f9ul, 0x7eaeb2faul,
            0x30e349b1ul, 0xc288cab2ul, 0xd1d83946ul, 0x23b3ba45ul, 0xf779deaeul, 0x05125dadul, 0x1642ae59ul, 0xe4292d5aul,
            0xba3a117eul, 0x4851927dul, 0x5b016189ul, 0xa96ae28aul, 0x7da08661ul, 0x8fcb0562ul, 0x9c9bf696ul, 0x6ef07595ul,
            0x417b1dbcul, 0xb3109ebful, 0xa0406d4bul, 0x522bee48ul, 0x86e18aa3ul, 0x748a09a0ul, 0x67dafa54ul, 0x95b17957ul,
            0xcba24573ul, 0x39c9c670ul, 0x2a993584ul, 0xd8f2b687ul, 0x0c38d26cul, 0xfe53516ful, 0xed03a29bul, 0x1f682198ul,
            0x5125dad3ul, 0xa34e59d0ul, 0xb01eaa24ul, 0x42752927ul, 0x96bf4dccul, 0x64d4cecful, 0x77843d3bul, 0x85efbe38ul,
            0xdbfc821cul, 0x2997011ful, 0x3ac7f2ebul, 0xc8ac71e8ul, 0x1c661503ul, 0xee0d9600ul, 0xfd5d65f4ul, 0x0f36e6f7ul,
            0x61c69362ul, 0x93ad1061ul, 0x80fde395ul, 0x72966096ul, 0xa65c047dul, 0x5437877eul, 0x4767748aul, 0xb50cf789ul,
            0xeb1fcbadul, 0x197448aeul, 0x0a24bb5aul, 0xf84f3859ul, 0x2c855cb2ul, 0xdeeedfb1ul, 0xcdbe2c45ul, 0x3fd5af46ul,
            0x7198540dul, 0x83f3d70eul, 0x90a324faul, 0x62c8a7f9ul, 0xb602c312ul, 0x44694011ul, 0x5739b3e5ul, 0xa55230e6ul,
            0xfb410cc2ul, 0x092a8fc1ul, 0x1a7a7c35ul, 0xe811ff36ul, 0x3cdb9bddul, 0xceb018deul, 0xdde0eb2aul, 0x2f8b6829ul,
            0x82f63b78ul, 0x709db87bul, 0x63cd4b8ful, 0x91a6c88cul, 0x456cac67ul, 0xb7072f64ul, 0xa457dc90ul, 0x563c5f93ul,
            0x082f63b7ul, 0xfa44e0b4ul, 0xe9141340ul, 0x1b7f9043ul, 0xcfb5f4a8ul, 0x3dde77abul, 0x2e8e845ful, 0xdce5075cul,
            0x92a8fc17ul, 0x60c37f14ul, 0x73938ce0ul, 0x81f80fe3ul, 0x55326b08ul, 0xa759e80bul, 0xb4091bfful, 0x466298fcul,
            0x1871a4d8ul, 0xea1a27dbul, 0xf94ad42ful, 0x0b21572cul, 0xdfeb33c7ul, 0x2d80b0c4ul, 0x3ed04330ul, 0xccbbc033ul,
            0xa24bb5a6ul, 0x502036a5ul, 0x4370c551ul, 0xb11b4652ul, 0x65d122b9ul, 0x97baa1baul, 0x84ea524eul, 0x7681d14dul,
            0x2892ed69ul, 0xdaf96e6aul, 0xc9a99d9eul, 0x3bc21e9dul, 0xef087a76ul, 0x1d63f975ul, 0x0e330a81ul, 0xfc588982ul,
            0xb21572c9ul, 0x407ef1caul, 0x532e023eul, 0xa145813dul, 0x758fe5d6ul, 0x87e466d5ul, 0x94b49521ul, 0x66df1622ul,
            0x38cc2a06ul, 0xcaa7a905ul, 0xd9f75af1ul, 0x2b9cd9f2ul, 0xff56bd19ul, 0x0d3d3e1aul, 0x1e6dcdeeul, 0xec064eedul,
            0xc38d26c4ul, 0x31e6a5c7ul, 0x22b65633ul, 0xd0ddd530ul, 0x0417b1dbul, 0xf67c32d8ul, 0xe52cc12cul, 0x1747422ful,
            0x49547e0bul, 0xbb3ffd08ul, 0xa86f0efcul, 0x5a048dfful, 0x8ecee914ul, 0x7ca56a17ul, 0x6ff599e3ul, 0x9d9e1ae0ul,
            0xd3d3e1abul, 0x21b862a8ul, 0x32e8915cul, 0xc083125ful, 0x144976b4ul, 0xe622f5b7ul, 0xf5720643ul, 0x07198540ul,
            0x590ab964ul, 0xab613a67ul, 0xb831c993ul, 0x4a5a4a90ul, 0x9e902e7bul, 0x6cfbad78ul, 0x7fab5e8cul, 0x8dc0dd8ful,
            0xe330a81aul, 0x115b2b19ul, 0x020bd8edul, 0xf0605beeul, 0x24aa3f05ul, 0xd6c1bc06ul, 0xc5914ff2ul, 0x37faccf1ul,
            0x69e9f0d5ul, 0x9b8273d6ul, 0x88d28022ul, 0x7ab90321ul, 0xae7367caul, 0x5c18e4c9ul, 0x4f48173dul, 0xbd23943eul,
            0xf36e6f75ul, 0x0105ec76ul, 0x12551f82ul, 0xe03e9c81ul, 0x34f4f86aul, 0xc69f7b69ul, 0xd5cf889dul, 0x27a40b9eul,
            0x79b737baul, 0x8bdcb4b9ul, 0x988c474dul, 0x6ae7c44eul, 0xbe2da0a5ul, 0x4c4623a6ul, 0x5f16d052ul, 0xad7d5351ul,
        };
};

template<typename Type>
class CheckSum: public Type
{
    static constexpr std::uint32_t mask         = 0xFFFFFFFFul;
    static constexpr std::uint32_t tableMask    = 0x000000FFul;

    std::uint32_t   checkSum;
    public:
        CheckSum()                      {reset();}
        void          reset()           {checkSum = 0xFFFFFFFFul;}
        std::uint32_t checksum() const  {return (checkSum ^ mask);}
        template<typename View>
        void append(View const& view)
        {
            for (unsigned char v: view)
            {
                std::uint32_t value = static_cast<std::uint32_t>(v);
                checkSum = (checkSum >> 8) ^ Type::table[(checkSum ^ value) & tableMask];
            }
        }
};

using CRC32_Checksum    = CheckSum<CRC32>;
using CRC32C_Checksum   = CheckSum<CRC32C>;

}

#endif
